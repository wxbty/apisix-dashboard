import{$,addDisposableListener,EventType,isHTMLElement}from"../../../base/browser/dom.js";import{StandardMouseEvent}from"../../../base/browser/mouseEvent.js";import{Menu}from"../../../base/browser/ui/menu/menu.js";import{ActionRunner}from"../../../base/common/actions.js";import{isCancellationError}from"../../../base/common/errors.js";import{combinedDisposable,DisposableStore}from"../../../base/common/lifecycle.js";import"./contextMenuHandler.css";import{attachMenuStyler}from"../../theme/common/styler.js";export class ContextMenuHandler{constructor(e,t,o,i,n){this.contextViewService=e,this.telemetryService=t,this.notificationService=o,this.keybindingService=i,this.themeService=n,this.focusToReturn=null,this.block=null,this.options={blockMouse:!0}}configure(e){this.options=e}showContextMenu(e){const t=e.getActions();if(!t.length)return;let o;this.focusToReturn=document.activeElement;let i=isHTMLElement(e.domForShadowRoot)?e.domForShadowRoot:void 0;this.contextViewService.showContextView({getAnchor:()=>e.getAnchor(),canRelayout:!1,anchorAlignment:e.anchorAlignment,anchorAxisAlignment:e.anchorAxisAlignment,render:i=>{let n=e.getMenuClassName?e.getMenuClassName():"";n&&(i.className+=" "+n),this.options.blockMouse&&(this.block=i.appendChild($(".context-view-block")),this.block.style.position="fixed",this.block.style.cursor="initial",this.block.style.left="0",this.block.style.top="0",this.block.style.width="100%",this.block.style.height="100%",this.block.style.zIndex="-1",addDisposableListener(this.block,EventType.MOUSE_DOWN,(e=>e.stopPropagation())));const s=new DisposableStore,r=e.actionRunner||new ActionRunner;return r.onBeforeRun(this.onActionRun,this,s),r.onDidRun(this.onDidActionRun,this,s),o=new Menu(i,t,{actionViewItemProvider:e.getActionViewItem,context:e.getActionsContext?e.getActionsContext():null,actionRunner:r,getKeyBinding:e.getKeyBinding?e.getKeyBinding:e=>this.keybindingService.lookupKeybinding(e.id)}),s.add(attachMenuStyler(o,this.themeService)),o.onDidCancel((()=>this.contextViewService.hideContextView(!0)),null,s),o.onDidBlur((()=>this.contextViewService.hideContextView(!0)),null,s),s.add(addDisposableListener(window,EventType.BLUR,(()=>this.contextViewService.hideContextView(!0)))),s.add(addDisposableListener(window,EventType.MOUSE_DOWN,(e=>{if(e.defaultPrevented)return;let t=new StandardMouseEvent(e),o=t.target;if(!t.rightButton){while(o){if(o===i)return;o=o.parentElement}this.contextViewService.hideContextView(!0)}}))),combinedDisposable(s,o)},focus:()=>{o&&o.focus(!!e.autoSelectFirstItem)},onHide:t=>{e.onHide&&e.onHide(!!t),this.block&&(this.block.remove(),this.block=null),this.focusToReturn&&this.focusToReturn.focus()}},i,!!i)}onActionRun(e){this.telemetryService.publicLog2("workbenchActionExecuted",{id:e.action.id,from:"contextMenu"}),this.contextViewService.hideContextView(!1),this.focusToReturn&&this.focusToReturn.focus()}onDidActionRun(e){e.error&&!isCancellationError(e.error)&&this.notificationService.error(e.error)}}