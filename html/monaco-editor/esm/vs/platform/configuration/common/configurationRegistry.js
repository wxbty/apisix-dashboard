import{distinct}from"../../../base/common/arrays.js";import{Emitter}from"../../../base/common/event.js";import*as types from"../../../base/common/types.js";import*as nls from"../../../nls.js";import{Extensions as JSONExtensions}from"../../jsonschemas/common/jsonContributionRegistry.js";import{Registry}from"../../registry/common/platform.js";export const Extensions={Configuration:"base.contributions.configuration"};export const allSettings={properties:{},patternProperties:{}};export const applicationSettings={properties:{},patternProperties:{}};export const machineSettings={properties:{},patternProperties:{}};export const machineOverridableSettings={properties:{},patternProperties:{}};export const windowSettings={properties:{},patternProperties:{}};export const resourceSettings={properties:{},patternProperties:{}};export const resourceLanguageSettingsSchemaId="vscode://schemas/settings/resourceLanguage";const contributionRegistry=Registry.as(JSONExtensions.JSONContribution);class ConfigurationRegistry{constructor(){this.overrideIdentifiers=new Set,this._onDidSchemaChange=new Emitter,this._onDidUpdateConfiguration=new Emitter,this.configurationDefaultsOverrides=new Map,this.defaultLanguageConfigurationOverridesNode={id:"defaultOverrides",title:nls.localize("defaultLanguageConfigurationOverrides.title","Default Language Configuration Overrides"),properties:{}},this.configurationContributors=[this.defaultLanguageConfigurationOverridesNode],this.resourceLanguageSettingsSchema={properties:{},patternProperties:{},additionalProperties:!1,errorMessage:"Unknown editor configuration setting",allowTrailingCommas:!0,allowComments:!0},this.configurationProperties={},this.excludedConfigurationProperties={},contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this.registerOverridePropertyPatternKey()}registerConfiguration(e,t=!0){this.registerConfigurations([e],t)}registerConfigurations(e,t=!0){const r=this.doRegisterConfigurations(e,t);contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:r})}registerDefaultConfigurations(e){var t;const r=[],i=[];for(const{overrides:s,source:o}of e)for(const e in s)if(r.push(e),OVERRIDE_PROPERTY_REGEX.test(e)){const r=Object.assign(Object.assign({},(null===(t=this.configurationDefaultsOverrides.get(e))||void 0===t?void 0:t.value)||{}),s[e]);this.configurationDefaultsOverrides.set(e,{source:o,value:r});const n={type:"object",default:r,description:nls.localize("defaultLanguageConfiguration.description","Configure settings to be overridden for {0} language.",e),$ref:resourceLanguageSettingsSchemaId,defaultDefaultValue:r,source:types.isString(o)?void 0:o};i.push(...overrideIdentifiersFromKey(e)),this.configurationProperties[e]=n,this.defaultLanguageConfigurationOverridesNode.properties[e]=n}else{this.configurationDefaultsOverrides.set(e,{value:s[e],source:o});const t=this.configurationProperties[e];t&&(this.updatePropertyDefaultValue(e,t),this.updateSchema(e,t))}this.registerOverrideIdentifiers(i),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:r,defaultsOverrides:!0})}registerOverrideIdentifiers(e){for(const t of e)this.overrideIdentifiers.add(t);this.updateOverridePropertyPatternKey()}doRegisterConfigurations(e,t){const r=[];return e.forEach((e=>{r.push(...this.validateAndRegisterProperties(e,t,e.extensionInfo,e.restrictedProperties)),this.configurationContributors.push(e),this.registerJSONConfiguration(e)})),r}validateAndRegisterProperties(e,t=!0,r,i,s=3){s=types.isUndefinedOrNull(e.scope)?s:e.scope;let o=[],n=e.properties;if(n)for(let g in n){if(t&&validateProperty(g)){delete n[g];continue}const e=n[g];e.source=r,e.defaultDefaultValue=n[g].default,this.updatePropertyDefaultValue(g,e),OVERRIDE_PROPERTY_REGEX.test(g)?e.scope=void 0:(e.scope=types.isUndefinedOrNull(e.scope)?s:e.scope,e.restricted=types.isUndefinedOrNull(e.restricted)?!!(null===i||void 0===i?void 0:i.includes(g)):e.restricted),!n[g].hasOwnProperty("included")||n[g].included?(this.configurationProperties[g]=n[g],!n[g].deprecationMessage&&n[g].markdownDeprecationMessage&&(n[g].deprecationMessage=n[g].markdownDeprecationMessage),o.push(g)):(this.excludedConfigurationProperties[g]=n[g],delete n[g])}let a=e.allOf;if(a)for(let g of a)o.push(...this.validateAndRegisterProperties(g,t,r,i,s));return o}getConfigurationProperties(){return this.configurationProperties}registerJSONConfiguration(e){const t=e=>{let r=e.properties;if(r)for(const t in r)this.updateSchema(t,r[t]);let i=e.allOf;i&&i.forEach(t)};t(e)}updateSchema(e,t){switch(allSettings.properties[e]=t,t.scope){case 1:applicationSettings.properties[e]=t;break;case 2:machineSettings.properties[e]=t;break;case 6:machineOverridableSettings.properties[e]=t;break;case 3:windowSettings.properties[e]=t;break;case 4:resourceSettings.properties[e]=t;break;case 5:resourceSettings.properties[e]=t,this.resourceLanguageSettingsSchema.properties[e]=t;break}}updateOverridePropertyPatternKey(){for(const e of this.overrideIdentifiers.values()){const t=`[${e}]`,r={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};this.updatePropertyDefaultValue(t,r),allSettings.properties[t]=r,applicationSettings.properties[t]=r,machineSettings.properties[t]=r,machineOverridableSettings.properties[t]=r,windowSettings.properties[t]=r,resourceSettings.properties[t]=r}this._onDidSchemaChange.fire()}registerOverridePropertyPatternKey(){const e={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,this._onDidSchemaChange.fire()}updatePropertyDefaultValue(e,t){const r=this.configurationDefaultsOverrides.get(e);let i=null===r||void 0===r?void 0:r.value,s=null===r||void 0===r?void 0:r.source;types.isUndefined(i)&&(i=t.defaultDefaultValue,s=void 0),types.isUndefined(i)&&(i=getDefaultValue(t.type)),t.default=i,t.defaultValueSource=s}}const OVERRIDE_IDENTIFIER_PATTERN="\\[([^\\]]+)\\]",OVERRIDE_IDENTIFIER_REGEX=new RegExp(OVERRIDE_IDENTIFIER_PATTERN,"g");export const OVERRIDE_PROPERTY_PATTERN=`^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;export const OVERRIDE_PROPERTY_REGEX=new RegExp(OVERRIDE_PROPERTY_PATTERN);export function overrideIdentifiersFromKey(e){const t=[];if(OVERRIDE_PROPERTY_REGEX.test(e)){let r=OVERRIDE_IDENTIFIER_REGEX.exec(e);while(null===r||void 0===r?void 0:r.length){const i=r[1].trim();i&&t.push(i),r=OVERRIDE_IDENTIFIER_REGEX.exec(e)}}return distinct(t)}export function getDefaultValue(e){const t=Array.isArray(e)?e[0]:e;switch(t){case"boolean":return!1;case"integer":case"number":return 0;case"string":return"";case"array":return[];case"object":return{};default:return null}}const configurationRegistry=new ConfigurationRegistry;Registry.add(Extensions.Configuration,configurationRegistry);export function validateProperty(e){return e.trim()?OVERRIDE_PROPERTY_REGEX.test(e)?nls.localize("config.property.languageDefault","Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",e):void 0!==configurationRegistry.getConfigurationProperties()[e]?nls.localize("config.property.duplicate","Cannot register '{0}'. This property is already registered.",e):null:nls.localize("config.property.empty","Cannot register an empty property")}