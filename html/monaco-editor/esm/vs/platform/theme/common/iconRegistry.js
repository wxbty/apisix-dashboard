import{RunOnceScheduler}from"../../../base/common/async.js";import{Codicon,CSSIcon}from"../../../base/common/codicons.js";import{Emitter}from"../../../base/common/event.js";import{localize}from"../../../nls.js";import{Extensions as JSONExtensions}from"../../jsonschemas/common/jsonContributionRegistry.js";import*as platform from"../../registry/common/platform.js";import{ThemeIcon}from"./themeService.js";export const Extensions={IconContribution:"base.contributions.icons"};export var IconContribution;(function(e){function o(e,o){let i=e.defaults;while(ThemeIcon.isThemeIcon(i)){const e=iconRegistry.getIcon(i.id);if(!e)return;i=e.defaults}return i}e.getDefinition=o})(IconContribution||(IconContribution={}));class IconRegistry{constructor(){this._onDidChange=new Emitter,this.onDidChange=this._onDidChange.event,this.iconSchema={definitions:{icons:{type:"object",properties:{fontId:{type:"string",description:localize("iconDefintion.fontId","The id of the font to use. If not set, the font that is defined first is used.")},fontCharacter:{type:"string",description:localize("iconDefintion.fontCharacter","The font character associated with the icon definition.")}},additionalProperties:!1,defaultSnippets:[{body:{fontCharacter:"\\\\e030"}}]}},type:"object",properties:{}},this.iconReferenceSchema={type:"string",pattern:`^${CSSIcon.iconNameExpression}$`,enum:[],enumDescriptions:[]},this.iconsById={},this.iconFontsById={}}registerIcon(e,o,i,n){const t=this.iconsById[e];if(t){if(i&&!t.description){t.description=i,this.iconSchema.properties[e].markdownDescription=`${i} $(${e})`;const o=this.iconReferenceSchema.enum.indexOf(e);-1!==o&&(this.iconReferenceSchema.enumDescriptions[o]=i),this._onDidChange.fire()}return t}let s={id:e,description:i,defaults:o,deprecationMessage:n};this.iconsById[e]=s;let c={$ref:"#/definitions/icons"};return n&&(c.deprecationMessage=n),i&&(c.markdownDescription=`${i}: $(${e})`),this.iconSchema.properties[e]=c,this.iconReferenceSchema.enum.push(e),this.iconReferenceSchema.enumDescriptions.push(i||""),this._onDidChange.fire(),{id:e}}getIcons(){return Object.keys(this.iconsById).map((e=>this.iconsById[e]))}getIcon(e){return this.iconsById[e]}getIconSchema(){return this.iconSchema}toString(){const e=(e,o)=>e.id.localeCompare(o.id),o=e=>{while(ThemeIcon.isThemeIcon(e.defaults))e=this.iconsById[e.defaults.id];return`codicon codicon-${e?e.id:""}`};let i=[];i.push("| preview     | identifier                        | default codicon ID                | description"),i.push("| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |");const n=Object.keys(this.iconsById).map((e=>this.iconsById[e]));for(const t of n.filter((e=>!!e.description)).sort(e))i.push(`|<i class="${o(t)}"></i>|${t.id}|${ThemeIcon.isThemeIcon(t.defaults)?t.defaults.id:t.id}|${t.description||""}|`);i.push("| preview     | identifier                        "),i.push("| ----------- | --------------------------------- |");for(const t of n.filter((e=>!ThemeIcon.isThemeIcon(e.defaults))).sort(e))i.push(`|<i class="${o(t)}"></i>|${t.id}|`);return i.join("\n")}}const iconRegistry=new IconRegistry;platform.Registry.add(Extensions.IconContribution,iconRegistry);export function registerIcon(e,o,i,n){return iconRegistry.registerIcon(e,o,i,n)}export function getIconRegistry(){return iconRegistry}function initialize(){for(const e of Codicon.getAll())iconRegistry.registerIcon(e.id,e.definition,e.description)}initialize();export const iconsSchemaId="vscode://schemas/icons";let schemaRegistry=platform.Registry.as(JSONExtensions.JSONContribution);schemaRegistry.registerSchema(iconsSchemaId,iconRegistry.getIconSchema());const delayer=new RunOnceScheduler((()=>schemaRegistry.notifySchemaChanged(iconsSchemaId)),200);iconRegistry.onDidChange((()=>{delayer.isScheduled()||delayer.schedule()}));export const widgetClose=registerIcon("widget-close",Codicon.close,localize("widgetClose","Icon for the close action in widgets."));export const gotoPreviousLocation=registerIcon("goto-previous-location",Codicon.arrowUp,localize("previousChangeIcon","Icon for goto previous editor location."));export const gotoNextLocation=registerIcon("goto-next-location",Codicon.arrowDown,localize("nextChangeIcon","Icon for goto next editor location."));export const syncing=ThemeIcon.modify(Codicon.sync,"spin");export const spinningLoading=ThemeIcon.modify(Codicon.loading,"spin");