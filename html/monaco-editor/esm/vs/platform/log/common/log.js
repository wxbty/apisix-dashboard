import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{createDecorator}from"../../instantiation/common/instantiation.js";export const ILogService=createDecorator("logService");export var LogLevel;(function(e){e[e["Trace"]=0]="Trace",e[e["Debug"]=1]="Debug",e[e["Info"]=2]="Info",e[e["Warning"]=3]="Warning",e[e["Error"]=4]="Error",e[e["Critical"]=5]="Critical",e[e["Off"]=6]="Off"})(LogLevel||(LogLevel={}));export const DEFAULT_LOG_LEVEL=LogLevel.Info;export class AbstractLogger extends Disposable{constructor(){super(...arguments),this.level=DEFAULT_LOG_LEVEL,this._onDidChangeLogLevel=this._register(new Emitter)}setLevel(e){this.level!==e&&(this.level=e,this._onDidChangeLogLevel.fire(this.level))}getLevel(){return this.level}}export class ConsoleLogger extends AbstractLogger{constructor(e=DEFAULT_LOG_LEVEL){super(),this.setLevel(e)}trace(e,...o){this.getLevel()<=LogLevel.Trace&&console.log("%cTRACE","color: #888",e,...o)}debug(e,...o){this.getLevel()<=LogLevel.Debug&&console.log("%cDEBUG","background: #eee; color: #888",e,...o)}info(e,...o){this.getLevel()<=LogLevel.Info&&console.log("%c INFO","color: #33f",e,...o)}error(e,...o){this.getLevel()<=LogLevel.Error&&console.log("%c  ERR","color: #f33",e,...o)}dispose(){}}export class LogService extends Disposable{constructor(e){super(),this.logger=e,this._register(e)}getLevel(){return this.logger.getLevel()}trace(e,...o){this.logger.trace(e,...o)}debug(e,...o){this.logger.debug(e,...o)}info(e,...o){this.logger.info(e,...o)}error(e,...o){this.logger.error(e,...o)}}