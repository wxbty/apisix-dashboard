var __decorate=this&&this.__decorate||function(e,t,s,n){var o,i=arguments.length,r=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,s):n;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(e,t,s,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(r=(i<3?o(r):i>3?o(t,s,r):o(t,s))||r);return i>3&&r&&Object.defineProperty(t,s,r),r},__param=this&&this.__param||function(e,t){return function(s,n){t(s,n,e)}};import{PauseableEmitter}from"../../../base/common/event.js";import{Iterable}from"../../../base/common/iterator.js";import{DisposableStore,MutableDisposable}from"../../../base/common/lifecycle.js";import{TernarySearchTree}from"../../../base/common/map.js";import{localize}from"../../../nls.js";import{CommandsRegistry}from"../../commands/common/commands.js";import{IConfigurationService}from"../../configuration/common/configuration.js";import{IContextKeyService,RawContextKey,SET_CONTEXT_COMMAND_ID}from"../common/contextkey.js";const KEYBINDING_CONTEXT_ATTR="data-keybinding-context";export class Context{constructor(e,t){this._id=e,this._parent=t,this._value=Object.create(null),this._value["_contextId"]=e}setValue(e,t){return this._value[e]!==t&&(this._value[e]=t,!0)}removeValue(e){return e in this._value&&(delete this._value[e],!0)}getValue(e){const t=this._value[e];return"undefined"===typeof t&&this._parent?this._parent.getValue(e):t}}class NullContext extends Context{constructor(){super(-1,null)}setValue(e,t){return!1}removeValue(e){return!1}getValue(e){}}NullContext.INSTANCE=new NullContext;class ConfigAwareContextValuesContainer extends Context{constructor(e,t,s){super(e,null),this._configurationService=t,this._values=TernarySearchTree.forConfigKeys(),this._listener=this._configurationService.onDidChangeConfiguration((e=>{if(6===e.source){const e=Array.from(Iterable.map(this._values,(([e])=>e)));this._values.clear(),s.fire(new ArrayContextKeyChangeEvent(e))}else{const t=[];for(const s of e.affectedKeys){const e=`config.${s}`,n=this._values.findSuperstr(e);void 0!==n&&(t.push(...Iterable.map(n,(([e])=>e))),this._values.deleteSuperstr(e)),this._values.has(e)&&(t.push(e),this._values.delete(e))}s.fire(new ArrayContextKeyChangeEvent(t))}}))}dispose(){this._listener.dispose()}getValue(e){if(0!==e.indexOf(ConfigAwareContextValuesContainer._keyPrefix))return super.getValue(e);if(this._values.has(e))return this._values.get(e);const t=e.substr(ConfigAwareContextValuesContainer._keyPrefix.length),s=this._configurationService.getValue(t);let n;switch(typeof s){case"number":case"boolean":case"string":n=s;break;default:n=Array.isArray(s)?JSON.stringify(s):s}return this._values.set(e,n),n}setValue(e,t){return super.setValue(e,t)}removeValue(e){return super.removeValue(e)}}ConfigAwareContextValuesContainer._keyPrefix="config.";class ContextKey{constructor(e,t,s){this._service=e,this._key=t,this._defaultValue=s,this.reset()}set(e){this._service.setContext(this._key,e)}reset(){"undefined"===typeof this._defaultValue?this._service.removeContext(this._key):this._service.setContext(this._key,this._defaultValue)}get(){return this._service.getContextKeyValue(this._key)}}class SimpleContextKeyChangeEvent{constructor(e){this.key=e}affectsSome(e){return e.has(this.key)}}class ArrayContextKeyChangeEvent{constructor(e){this.keys=e}affectsSome(e){for(const t of this.keys)if(e.has(t))return!0;return!1}}class CompositeContextKeyChangeEvent{constructor(e){this.events=e}affectsSome(e){for(const t of this.events)if(t.affectsSome(e))return!0;return!1}}export class AbstractContextKeyService{constructor(e){this._onDidChangeContext=new PauseableEmitter({merge:e=>new CompositeContextKeyChangeEvent(e)}),this.onDidChangeContext=this._onDidChangeContext.event,this._isDisposed=!1,this._myContextId=e}createKey(e,t){if(this._isDisposed)throw new Error("AbstractContextKeyService has been disposed");return new ContextKey(this,e,t)}bufferChangeEvents(e){this._onDidChangeContext.pause();try{e()}finally{this._onDidChangeContext.resume()}}createScoped(e){if(this._isDisposed)throw new Error("AbstractContextKeyService has been disposed");return new ScopedContextKeyService(this,e)}contextMatchesRules(e){if(this._isDisposed)throw new Error("AbstractContextKeyService has been disposed");const t=this.getContextValuesContainer(this._myContextId),s=!e||e.evaluate(t);return s}getContextKeyValue(e){if(!this._isDisposed)return this.getContextValuesContainer(this._myContextId).getValue(e)}setContext(e,t){if(this._isDisposed)return;const s=this.getContextValuesContainer(this._myContextId);s&&s.setValue(e,t)&&this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(e))}removeContext(e){this._isDisposed||this.getContextValuesContainer(this._myContextId).removeValue(e)&&this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(e))}getContext(e){return this._isDisposed?NullContext.INSTANCE:this.getContextValuesContainer(findContextAttr(e))}}let ContextKeyService=class extends AbstractContextKeyService{constructor(e){super(0),this._contexts=new Map,this._toDispose=new DisposableStore,this._lastContextId=0;const t=new ConfigAwareContextValuesContainer(this._myContextId,e,this._onDidChangeContext);this._contexts.set(this._myContextId,t),this._toDispose.add(t)}dispose(){this._onDidChangeContext.dispose(),this._isDisposed=!0,this._toDispose.dispose()}getContextValuesContainer(e){return this._isDisposed?NullContext.INSTANCE:this._contexts.get(e)||NullContext.INSTANCE}createChildContext(e=this._myContextId){if(this._isDisposed)throw new Error("ContextKeyService has been disposed");let t=++this._lastContextId;return this._contexts.set(t,new Context(t,this.getContextValuesContainer(e))),t}disposeContext(e){this._isDisposed||this._contexts.delete(e)}};ContextKeyService=__decorate([__param(0,IConfigurationService)],ContextKeyService);export{ContextKeyService};class ScopedContextKeyService extends AbstractContextKeyService{constructor(e,t){if(super(e.createChildContext()),this._parentChangeListener=new MutableDisposable,this._parent=e,this._updateParentChangeListener(),this._domNode=t,this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)){let e="";this._domNode.classList&&(e=Array.from(this._domNode.classList.values()).join(", ")),console.error("Element already has context attribute"+(e?": "+e:""))}this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR,String(this._myContextId))}_updateParentChangeListener(){this._parentChangeListener.value=this._parent.onDidChangeContext(this._onDidChangeContext.fire,this._onDidChangeContext)}dispose(){this._isDisposed||(this._onDidChangeContext.dispose(),this._parent.disposeContext(this._myContextId),this._parentChangeListener.dispose(),this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR),this._isDisposed=!0)}getContextValuesContainer(e){return this._isDisposed?NullContext.INSTANCE:this._parent.getContextValuesContainer(e)}createChildContext(e=this._myContextId){if(this._isDisposed)throw new Error("ScopedContextKeyService has been disposed");return this._parent.createChildContext(e)}disposeContext(e){this._isDisposed||this._parent.disposeContext(e)}}function findContextAttr(e){while(e){if(e.hasAttribute(KEYBINDING_CONTEXT_ATTR)){const t=e.getAttribute(KEYBINDING_CONTEXT_ATTR);return t?parseInt(t,10):NaN}e=e.parentElement}return 0}CommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID,(function(e,t,s){e.get(IContextKeyService).createKey(String(t),s)})),CommandsRegistry.registerCommand({id:"getContextKeyInfo",handler(){return[...RawContextKey.all()].sort(((e,t)=>e.key.localeCompare(t.key)))},description:{description:localize("getContextKeyInfo","A command that returns information about context keys"),args:[]}}),CommandsRegistry.registerCommand("_generateContextKeyInfo",(function(){const e=[],t=new Set;for(let s of RawContextKey.all())t.has(s.key)||(t.add(s.key),e.push(s));e.sort(((e,t)=>e.key.localeCompare(t.key))),console.log(JSON.stringify(e,void 0,2))}));