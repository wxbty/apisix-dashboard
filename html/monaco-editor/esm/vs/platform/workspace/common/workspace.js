import{TernarySearchTree}from"../../../base/common/map.js";import{createDecorator}from"../../instantiation/common/instantiation.js";export const IWorkspaceContextService=createDecorator("contextService");export class Workspace{constructor(t,r,i,e,s){this._id=t,this._transient=i,this._configuration=e,this._ignorePathCasing=s,this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing),this.folders=r}get folders(){return this._folders}set folders(t){this._folders=t,this.updateFoldersMap()}get id(){return this._id}get transient(){return this._transient}get configuration(){return this._configuration}set configuration(t){this._configuration=t}getFolder(t){return t&&this._foldersMap.findSubstr(t.with({scheme:t.scheme,authority:t.authority,path:t.path}))||null}updateFoldersMap(){this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing);for(const t of this.folders)this._foldersMap.set(t.uri,t)}toJSON(){return{id:this.id,folders:this.folders,transient:this.transient,configuration:this.configuration}}}export class WorkspaceFolder{constructor(t,r){this.raw=r,this.uri=t.uri,this.index=t.index,this.name=t.name}toJSON(){return{uri:this.uri,name:this.name,index:this.index}}}