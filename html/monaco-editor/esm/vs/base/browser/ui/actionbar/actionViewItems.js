import{isFirefox}from"../../browser.js";import{DataTransfers}from"../../dnd.js";import{$,addDisposableListener,append,EventHelper,EventType}from"../../dom.js";import{EventType as TouchEventType,Gesture}from"../../touch.js";import{Action,ActionRunner,Separator}from"../../../common/actions.js";import{Disposable}from"../../../common/lifecycle.js";import*as platform from"../../../common/platform.js";import*as types from"../../../common/types.js";import"./actionbar.css";import*as nls from"../../../../nls.js";export class BaseActionViewItem extends Disposable{constructor(t,e,s={}){super(),this.options=s,this._context=t||this,this._action=e,e instanceof Action&&this._register(e.onDidChange((t=>{this.element&&this.handleActionChangeEvent(t)})))}handleActionChangeEvent(t){void 0!==t.enabled&&this.updateEnabled(),void 0!==t.checked&&this.updateChecked(),void 0!==t.class&&this.updateClass(),void 0!==t.label&&(this.updateLabel(),this.updateTooltip()),void 0!==t.tooltip&&this.updateTooltip()}get actionRunner(){return this._actionRunner||(this._actionRunner=this._register(new ActionRunner)),this._actionRunner}set actionRunner(t){this._actionRunner=t}getAction(){return this._action}isEnabled(){return this._action.enabled}setActionContext(t){this._context=t}render(t){const e=this.element=t;this._register(Gesture.addTarget(t));const s=this.options&&this.options.draggable;s&&(t.draggable=!0,isFirefox&&this._register(addDisposableListener(t,EventType.DRAG_START,(t=>{var e;return null===(e=t.dataTransfer)||void 0===e?void 0:e.setData(DataTransfers.TEXT,this._action.label)})))),this._register(addDisposableListener(e,TouchEventType.Tap,(t=>this.onClick(t,!0)))),this._register(addDisposableListener(e,EventType.MOUSE_DOWN,(t=>{s||EventHelper.stop(t,!0),this._action.enabled&&0===t.button&&e.classList.add("active")}))),platform.isMacintosh&&this._register(addDisposableListener(e,EventType.CONTEXT_MENU,(t=>{0===t.button&&!0===t.ctrlKey&&this.onClick(t)}))),this._register(addDisposableListener(e,EventType.CLICK,(t=>{EventHelper.stop(t,!0),this.options&&this.options.isMenu||this.onClick(t)}))),this._register(addDisposableListener(e,EventType.DBLCLICK,(t=>{EventHelper.stop(t,!0)}))),[EventType.MOUSE_UP,EventType.MOUSE_OUT].forEach((t=>{this._register(addDisposableListener(e,t,(t=>{EventHelper.stop(t),e.classList.remove("active")})))}))}onClick(t,e=!1){var s;EventHelper.stop(t,!0);const i=types.isUndefinedOrNull(this._context)?(null===(s=this.options)||void 0===s?void 0:s.useEventAsContext)?t:{preserveFocus:e}:this._context;this.actionRunner.run(this._action,i)}focus(){this.element&&(this.element.tabIndex=0,this.element.focus(),this.element.classList.add("focused"))}blur(){this.element&&(this.element.blur(),this.element.tabIndex=-1,this.element.classList.remove("focused"))}setFocusable(t){this.element&&(this.element.tabIndex=t?0:-1)}get trapsArrowNavigation(){return!1}updateEnabled(){}updateLabel(){}updateTooltip(){}updateClass(){}updateChecked(){}dispose(){this.element&&(this.element.remove(),this.element=void 0),super.dispose()}}export class ActionViewItem extends BaseActionViewItem{constructor(t,e,s={}){super(t,e,s),this.options=s,this.options.icon=void 0!==s.icon&&s.icon,this.options.label=void 0===s.label||s.label,this.cssClass=""}render(t){super.render(t),this.element&&(this.label=append(this.element,$("a.action-label"))),this.label&&(this._action.id===Separator.ID?this.label.setAttribute("role","presentation"):this.options.isMenu?this.label.setAttribute("role","menuitem"):this.label.setAttribute("role","button")),this.options.label&&this.options.keybinding&&this.element&&(append(this.element,$("span.keybinding")).textContent=this.options.keybinding),this.updateClass(),this.updateLabel(),this.updateTooltip(),this.updateEnabled(),this.updateChecked()}focus(){this.label&&(this.label.tabIndex=0,this.label.focus())}blur(){this.label&&(this.label.tabIndex=-1)}setFocusable(t){this.label&&(this.label.tabIndex=t?0:-1)}updateLabel(){this.options.label&&this.label&&(this.label.textContent=this.getAction().label)}updateTooltip(){let t=null;this.getAction().tooltip?t=this.getAction().tooltip:!this.options.label&&this.getAction().label&&this.options.icon&&(t=this.getAction().label,this.options.keybinding&&(t=nls.localize({key:"titleLabel",comment:["action title","action keybinding"]},"{0} ({1})",t,this.options.keybinding))),t&&this.label&&(this.label.title=t)}updateClass(){this.cssClass&&this.label&&this.label.classList.remove(...this.cssClass.split(" ")),this.options.icon?(this.cssClass=this.getAction().class,this.label&&(this.label.classList.add("codicon"),this.cssClass&&this.label.classList.add(...this.cssClass.split(" "))),this.updateEnabled()):this.label&&this.label.classList.remove("codicon")}updateEnabled(){this.getAction().enabled?(this.label&&(this.label.removeAttribute("aria-disabled"),this.label.classList.remove("disabled")),this.element&&this.element.classList.remove("disabled")):(this.label&&(this.label.setAttribute("aria-disabled","true"),this.label.classList.add("disabled")),this.element&&this.element.classList.add("disabled"))}updateChecked(){this.label&&(this.getAction().checked?this.label.classList.add("checked"):this.label.classList.remove("checked"))}}