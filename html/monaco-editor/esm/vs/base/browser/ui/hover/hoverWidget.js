import*as dom from"../../dom.js";import{DomScrollableElement}from"../scrollbar/scrollableElement.js";import{Disposable}from"../../../common/lifecycle.js";import"./hover.css";const $=dom.$;export class HoverWidget extends Disposable{constructor(){super(),this.containerDomNode=document.createElement("div"),this.containerDomNode.className="monaco-hover",this.containerDomNode.tabIndex=0,this.containerDomNode.setAttribute("role","tooltip"),this.contentsDomNode=document.createElement("div"),this.contentsDomNode.className="monaco-hover-content",this.scrollbar=this._register(new DomScrollableElement(this.contentsDomNode,{consumeMouseWheelIfScrollbarIsNeeded:!0})),this.containerDomNode.appendChild(this.scrollbar.getDomNode())}onContentsChanged(){this.scrollbar.scanDomNode()}}export class HoverAction extends Disposable{constructor(t,e,o){super(),this.actionContainer=dom.append(t,$("div.action-container")),this.action=dom.append(this.actionContainer,$("a.action")),this.action.setAttribute("role","button"),e.iconClass&&dom.append(this.action,$(`span.icon.${e.iconClass}`));const n=dom.append(this.action,$("span"));n.textContent=o?`${e.label} (${o})`:e.label,this._register(dom.addDisposableListener(this.actionContainer,dom.EventType.MOUSE_DOWN,(t=>{t.stopPropagation(),t.preventDefault(),e.run(this.actionContainer)}))),this.setEnabled(!0)}static render(t,e,o){return new HoverAction(t,e,o)}setEnabled(t){t?(this.actionContainer.classList.remove("disabled"),this.actionContainer.removeAttribute("aria-disabled")):(this.actionContainer.classList.add("disabled"),this.actionContainer.setAttribute("aria-disabled","true"))}}