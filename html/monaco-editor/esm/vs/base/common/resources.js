import*as extpath from"./extpath.js";import{Schemas}from"./network.js";import*as paths from"./path.js";import{isLinux,isWindows}from"./platform.js";import{compare as strCompare,equalsIgnoreCase}from"./strings.js";import{URI,uriToFsPath}from"./uri.js";export function originalFSPath(t){return uriToFsPath(t,!0)}export class ExtUri{constructor(t){this._ignorePathCasing=t}compare(t,e,r=!1){return t===e?0:strCompare(this.getComparisonKey(t,r),this.getComparisonKey(e,r))}isEqual(t,e,r=!1){return t===e||!(!t||!e)&&this.getComparisonKey(t,r)===this.getComparisonKey(e,r)}getComparisonKey(t,e=!1){return t.with({path:this._ignorePathCasing(t)?t.path.toLowerCase():void 0,fragment:e?null:void 0}).toString()}isEqualOrParent(t,e,r=!1){if(t.scheme===e.scheme){if(t.scheme===Schemas.file)return extpath.isEqualOrParent(originalFSPath(t),originalFSPath(e),this._ignorePathCasing(t))&&t.query===e.query&&(r||t.fragment===e.fragment);if(isEqualAuthority(t.authority,e.authority))return extpath.isEqualOrParent(t.path,e.path,this._ignorePathCasing(t),"/")&&t.query===e.query&&(r||t.fragment===e.fragment)}return!1}joinPath(t,...e){return URI.joinPath(t,...e)}basenameOrAuthority(t){return basename(t)||t.authority}basename(t){return paths.posix.basename(t.path)}extname(t){return paths.posix.extname(t.path)}dirname(t){if(0===t.path.length)return t;let e;return t.scheme===Schemas.file?e=URI.file(paths.dirname(originalFSPath(t))).path:(e=paths.posix.dirname(t.path),t.authority&&e.length&&47!==e.charCodeAt(0)&&(console.error(`dirname("${t.toString})) resulted in a relative path`),e="/")),t.with({path:e})}normalizePath(t){if(!t.path.length)return t;let e;return e=t.scheme===Schemas.file?URI.file(paths.normalize(originalFSPath(t))).path:paths.posix.normalize(t.path),t.with({path:e})}relativePath(t,e){if(t.scheme!==e.scheme||!isEqualAuthority(t.authority,e.authority))return;if(t.scheme===Schemas.file){const r=paths.relative(originalFSPath(t),originalFSPath(e));return isWindows?extpath.toSlashes(r):r}let r=t.path||"/",a=e.path||"/";if(this._ignorePathCasing(t)){let t=0;for(const e=Math.min(r.length,a.length);t<e;t++)if(r.charCodeAt(t)!==a.charCodeAt(t)&&r.charAt(t).toLowerCase()!==a.charAt(t).toLowerCase())break;r=a.substr(0,t)+r.substr(t)}return paths.posix.relative(r,a)}resolvePath(t,e){if(t.scheme===Schemas.file){const r=URI.file(paths.resolve(originalFSPath(t),e));return t.with({authority:r.authority,path:r.path})}return e=extpath.toPosixPath(e),t.with({path:paths.posix.resolve(t.path,e)})}isAbsolutePath(t){return!!t.path&&"/"===t.path[0]}isEqualAuthority(t,e){return t===e||void 0!==t&&void 0!==e&&equalsIgnoreCase(t,e)}hasTrailingPathSeparator(t,e=paths.sep){if(t.scheme===Schemas.file){const r=originalFSPath(t);return r.length>extpath.getRoot(r).length&&r[r.length-1]===e}{const e=t.path;return e.length>1&&47===e.charCodeAt(e.length-1)&&!/^[a-zA-Z]:(\/$|\\$)/.test(t.fsPath)}}removeTrailingPathSeparator(t,e=paths.sep){return hasTrailingPathSeparator(t,e)?t.with({path:t.path.substr(0,t.path.length-1)}):t}addTrailingPathSeparator(t,e=paths.sep){let r=!1;if(t.scheme===Schemas.file){const a=originalFSPath(t);r=void 0!==a&&a.length===extpath.getRoot(a).length&&a[a.length-1]===e}else{e="/";const a=t.path;r=1===a.length&&47===a.charCodeAt(a.length-1)}return r||hasTrailingPathSeparator(t,e)?t:t.with({path:t.path+"/"})}}export const extUri=new ExtUri((()=>!1));export const extUriBiasedIgnorePathCase=new ExtUri((t=>t.scheme!==Schemas.file||!isLinux));export const extUriIgnorePathCase=new ExtUri((t=>!0));export const isEqual=extUri.isEqual.bind(extUri);export const isEqualOrParent=extUri.isEqualOrParent.bind(extUri);export const getComparisonKey=extUri.getComparisonKey.bind(extUri);export const basenameOrAuthority=extUri.basenameOrAuthority.bind(extUri);export const basename=extUri.basename.bind(extUri);export const extname=extUri.extname.bind(extUri);export const dirname=extUri.dirname.bind(extUri);export const joinPath=extUri.joinPath.bind(extUri);export const normalizePath=extUri.normalizePath.bind(extUri);export const relativePath=extUri.relativePath.bind(extUri);export const resolvePath=extUri.resolvePath.bind(extUri);export const isAbsolutePath=extUri.isAbsolutePath.bind(extUri);export const isEqualAuthority=extUri.isEqualAuthority.bind(extUri);export const hasTrailingPathSeparator=extUri.hasTrailingPathSeparator.bind(extUri);export const removeTrailingPathSeparator=extUri.removeTrailingPathSeparator.bind(extUri);export const addTrailingPathSeparator=extUri.addTrailingPathSeparator.bind(extUri);export var DataUri;(function(t){function e(e){const r=new Map,a=e.path.substring(e.path.indexOf(";")+1,e.path.lastIndexOf(";"));a.split(";").forEach((t=>{const[e,a]=t.split(":");e&&a&&r.set(e,a)}));const i=e.path.substring(0,e.path.indexOf(";"));return i&&r.set(t.META_DATA_MIME,i),r}t.META_DATA_LABEL="label",t.META_DATA_DESCRIPTION="description",t.META_DATA_SIZE="size",t.META_DATA_MIME="mime",t.parseMetaData=e})(DataUri||(DataUri={}));