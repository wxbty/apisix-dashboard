export function memoize(e,t,n){let o=null,r=null;if("function"===typeof n.value?(o="value",r=n.value,0!==r.length&&console.warn("Memoize should only be used in functions with zero parameters")):"function"===typeof n.get&&(o="get",r=n.get),!r)throw new Error("not supported");const i=`$memoize$${t}`;n[o]=function(...e){return this.hasOwnProperty(i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:r.apply(this,e)}),this[i]}}