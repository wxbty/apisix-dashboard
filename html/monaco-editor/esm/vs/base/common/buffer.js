const hasBuffer="undefined"!==typeof Buffer;let textDecoder;export class VSBuffer{constructor(e){this.buffer=e,this.byteLength=this.buffer.byteLength}static wrap(e){return hasBuffer&&!Buffer.isBuffer(e)&&(e=Buffer.from(e.buffer,e.byteOffset,e.byteLength)),new VSBuffer(e)}toString(){return hasBuffer?this.buffer.toString():(textDecoder||(textDecoder=new TextDecoder),textDecoder.decode(this.buffer))}}export function readUInt16LE(e,t){return e[t+0]<<0>>>0|e[t+1]<<8>>>0}export function writeUInt16LE(e,t,r){e[r+0]=255&t,t>>>=8,e[r+1]=255&t}export function readUInt32BE(e,t){return e[t]*Math.pow(2,24)+e[t+1]*Math.pow(2,16)+e[t+2]*Math.pow(2,8)+e[t+3]}export function writeUInt32BE(e,t,r){e[r+3]=t,t>>>=8,e[r+2]=t,t>>>=8,e[r+1]=t,t>>>=8,e[r]=t}export function readUInt8(e,t){return e[t]}export function writeUInt8(e,t,r){e[r]=t}