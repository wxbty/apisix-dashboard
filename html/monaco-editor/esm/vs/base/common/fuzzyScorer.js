import{createMatches as createFuzzyMatches,fuzzyScore}from"./filters.js";import{sep}from"./path.js";import{isWindows}from"./platform.js";import{stripWildcards}from"./strings.js";const NO_SCORE2=[void 0,[]];export function scoreFuzzy2(e,r,t=0,o=0){const a=r;return a.values&&a.values.length>1?doScoreFuzzy2Multiple(e,a.values,t,o):doScoreFuzzy2Single(e,r,t,o)}function doScoreFuzzy2Multiple(e,r,t,o){let a=0;const n=[];for(const s of r){const[r,i]=doScoreFuzzy2Single(e,s,t,o);if("number"!==typeof r)return NO_SCORE2;a+=r,n.push(...i)}return[a,normalizeMatches(n)]}function doScoreFuzzy2Single(e,r,t,o){const a=fuzzyScore(r.original,r.originalLowercase,t,e,e.toLowerCase(),o,!0);return a?[a[0],createFuzzyMatches(a)]:NO_SCORE2}const NO_ITEM_SCORE=Object.freeze({score:0});function normalizeMatches(e){const r=e.sort(((e,r)=>e.start-r.start)),t=[];let o;for(const a of r)o&&matchOverlaps(o,a)?(o.start=Math.min(o.start,a.start),o.end=Math.max(o.end,a.end)):(o=a,t.push(a));return t}function matchOverlaps(e,r){return!(e.end<r.start)&&!(r.end<e.start)}function queryExpectsExactMatch(e){return e.startsWith('"')&&e.endsWith('"')}const MULTIPLE_QUERY_VALUES_SEPARATOR=" ";export function prepareQuery(e){"string"!==typeof e&&(e="");const r=e.toLowerCase(),{pathNormalized:t,normalized:o,normalizedLowercase:a}=normalizeQuery(e),n=t.indexOf(sep)>=0,s=queryExpectsExactMatch(e);let i;const c=e.split(MULTIPLE_QUERY_VALUES_SEPARATOR);if(c.length>1)for(const l of c){const e=queryExpectsExactMatch(l),{pathNormalized:r,normalized:t,normalizedLowercase:o}=normalizeQuery(l);t&&(i||(i=[]),i.push({original:l,originalLowercase:l.toLowerCase(),pathNormalized:r,normalized:t,normalizedLowercase:o,expectContiguousMatch:e}))}return{original:e,originalLowercase:r,pathNormalized:t,normalized:o,normalizedLowercase:a,values:i,containsPathSeparator:n,expectContiguousMatch:s}}function normalizeQuery(e){let r;r=isWindows?e.replace(/\//g,sep):e.replace(/\\/g,sep);const t=stripWildcards(r).replace(/\s|"/g,"");return{pathNormalized:r,normalized:t,normalizedLowercase:t.toLowerCase()}}export function pieceToQuery(e){return Array.isArray(e)?prepareQuery(e.map((e=>e.original)).join(MULTIPLE_QUERY_VALUES_SEPARATOR)):prepareQuery(e.original)}