import{CSSIcon}from"./codicons.js";import{matchesFuzzy}from"./filters.js";import{ltrim}from"./strings.js";export const iconStartMarker="$(";const iconsRegex=new RegExp(`\\$\\(${CSSIcon.iconNameExpression}(?:${CSSIcon.iconModifierExpression})?\\)`,"g"),iconNameCharacterRegexp=new RegExp(CSSIcon.iconNameCharacter),escapeIconsRegex=new RegExp(`(\\\\)?${iconsRegex.source}`,"g");export function escapeIcons(e){return e.replace(escapeIconsRegex,((e,n)=>n?e:`\\${e}`))}const markdownEscapedIconsRegex=new RegExp(`\\\\${iconsRegex.source}`,"g");export function markdownEscapeEscapedIcons(e){return e.replace(markdownEscapedIconsRegex,(e=>`\\${e}`))}const stripIconsRegex=new RegExp(`(\\s)?(\\\\)?${iconsRegex.source}(\\s)?`,"g");export function stripIcons(e){return-1===e.indexOf(iconStartMarker)?e:e.replace(stripIconsRegex,((e,n,t,o)=>t?e:n||o||""))}export function parseLabelWithIcons(e){const n=e.indexOf(iconStartMarker);return-1===n?{text:e}:doParseLabelWithIcons(e,n)}function doParseLabelWithIcons(e,n){const t=[];let o="";function r(e){if(e){o+=e;for(const n of e)t.push(p)}}let c,s,i=-1,a="",p=0,x=n;const f=e.length;r(e.substr(0,n));while(x<f){if(c=e[x],s=e[x+1],c===iconStartMarker[0]&&s===iconStartMarker[1])i=x,r(a),a=iconStartMarker,x++;else if(")"===c&&-1!==i){const e=x-i+1;p+=e,i=-1,a=""}else-1!==i?iconNameCharacterRegexp.test(c)?a+=c:(r(a),i=-1,a=""):r(c);x++}return r(a),{text:o,iconOffsets:t}}export function matchesFuzzyIconAware(e,n,t=!1){const{text:o,iconOffsets:r}=n;if(!r||0===r.length)return matchesFuzzy(e,o,t);const c=ltrim(o," "),s=o.length-c.length,i=matchesFuzzy(e,c,t);if(i)for(const a of i){const e=r[a.start+s]+s;a.start+=e,a.end+=e}return i}