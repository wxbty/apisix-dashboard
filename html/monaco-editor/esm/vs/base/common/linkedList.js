class Node{constructor(e){this.element=e,this.next=Node.Undefined,this.prev=Node.Undefined}}Node.Undefined=new Node(void 0);export class LinkedList{constructor(){this._first=Node.Undefined,this._last=Node.Undefined,this._size=0}get size(){return this._size}isEmpty(){return this._first===Node.Undefined}clear(){let e=this._first;while(e!==Node.Undefined){const t=e.next;e.prev=Node.Undefined,e.next=Node.Undefined,e=t}this._first=Node.Undefined,this._last=Node.Undefined,this._size=0}unshift(e){return this._insert(e,!1)}push(e){return this._insert(e,!0)}_insert(e,t){const i=new Node(e);if(this._first===Node.Undefined)this._first=i,this._last=i;else if(t){const e=this._last;this._last=i,i.prev=e,e.next=i}else{const e=this._first;this._first=i,i.next=e,e.prev=i}this._size+=1;let s=!1;return()=>{s||(s=!0,this._remove(i))}}shift(){if(this._first!==Node.Undefined){const e=this._first.element;return this._remove(this._first),e}}pop(){if(this._last!==Node.Undefined){const e=this._last.element;return this._remove(this._last),e}}_remove(e){if(e.prev!==Node.Undefined&&e.next!==Node.Undefined){const t=e.prev;t.next=e.next,e.next.prev=t}else e.prev===Node.Undefined&&e.next===Node.Undefined?(this._first=Node.Undefined,this._last=Node.Undefined):e.next===Node.Undefined?(this._last=this._last.prev,this._last.next=Node.Undefined):e.prev===Node.Undefined&&(this._first=this._first.next,this._first.prev=Node.Undefined);this._size-=1}*[Symbol.iterator](){let e=this._first;while(e!==Node.Undefined)yield e.element,e=e.next}}