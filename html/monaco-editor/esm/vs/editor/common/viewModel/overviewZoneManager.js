export class ColorZone{constructor(t,o,e){this._colorZoneBrand=void 0,this.from=0|t,this.to=0|o,this.colorId=0|e}static compare(t,o){return t.colorId===o.colorId?t.from===o.from?t.to-o.to:t.from-o.from:t.colorId-o.colorId}}export class OverviewRulerZone{constructor(t,o,e){this._overviewRulerZoneBrand=void 0,this.startLineNumber=t,this.endLineNumber=o,this.color=e,this._colorZone=null}static compare(t,o){return t.color===o.color?t.startLineNumber===o.startLineNumber?t.endLineNumber-o.endLineNumber:t.startLineNumber-o.startLineNumber:t.color<o.color?-1:1}setColorZone(t){this._colorZone=t}getColorZones(){return this._colorZone}}export class OverviewZoneManager{constructor(t){this._getVerticalOffsetForLine=t,this._zones=[],this._colorZonesInvalid=!1,this._lineHeight=0,this._domWidth=0,this._domHeight=0,this._outerHeight=0,this._pixelRatio=1,this._lastAssignedId=0,this._color2Id=Object.create(null),this._id2Color=[]}getId2Color(){return this._id2Color}setZones(t){this._zones=t,this._zones.sort(OverviewRulerZone.compare)}setLineHeight(t){return this._lineHeight!==t&&(this._lineHeight=t,this._colorZonesInvalid=!0,!0)}setPixelRatio(t){this._pixelRatio=t,this._colorZonesInvalid=!0}getDOMWidth(){return this._domWidth}getCanvasWidth(){return this._domWidth*this._pixelRatio}setDOMWidth(t){return this._domWidth!==t&&(this._domWidth=t,this._colorZonesInvalid=!0,!0)}getDOMHeight(){return this._domHeight}getCanvasHeight(){return this._domHeight*this._pixelRatio}setDOMHeight(t){return this._domHeight!==t&&(this._domHeight=t,this._colorZonesInvalid=!0,!0)}getOuterHeight(){return this._outerHeight}setOuterHeight(t){return this._outerHeight!==t&&(this._outerHeight=t,this._colorZonesInvalid=!0,!0)}resolveColorZones(){const t=this._colorZonesInvalid,o=Math.floor(this._lineHeight),e=Math.floor(this.getCanvasHeight()),i=Math.floor(this._outerHeight),r=e/i,s=Math.floor(4*this._pixelRatio/2),h=[];for(let n=0,l=this._zones.length;n<l;n++){const i=this._zones[n];if(!t){const t=i.getColorZones();if(t){h.push(t);continue}}const l=Math.floor(r*this._getVerticalOffsetForLine(i.startLineNumber)),c=Math.floor(r*(this._getVerticalOffsetForLine(i.endLineNumber)+o));let _=Math.floor((l+c)/2),a=c-_;a<s&&(a=s),_-a<0&&(_=a),_+a>e&&(_=e-a);const d=i.color;let u=this._color2Id[d];u||(u=++this._lastAssignedId,this._color2Id[d]=u,this._id2Color[u]=d);const g=new ColorZone(_-a,_+a,u);i.setColorZone(g),h.push(g)}return this._colorZonesInvalid=!1,h.sort(ColorZone.compare),h}}