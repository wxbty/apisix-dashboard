import{Disposable}from"../../../base/common/lifecycle.js";export class ViewEventHandler extends Disposable{constructor(){super(),this._shouldRender=!0}shouldRender(){return this._shouldRender}forceShouldRender(){this._shouldRender=!0}setShouldRender(){this._shouldRender=!0}onDidRender(){this._shouldRender=!1}onCompositionStart(e){return!1}onCompositionEnd(e){return!1}onConfigurationChanged(e){return!1}onCursorStateChanged(e){return!1}onDecorationsChanged(e){return!1}onFlushed(e){return!1}onFocusChanged(e){return!1}onLanguageConfigurationChanged(e){return!1}onLineMappingChanged(e){return!1}onLinesChanged(e){return!1}onLinesDeleted(e){return!1}onLinesInserted(e){return!1}onRevealRangeRequest(e){return!1}onScrollChanged(e){return!1}onThemeChanged(e){return!1}onTokensChanged(e){return!1}onTokensColorsChanged(e){return!1}onZonesChanged(e){return!1}handleEvents(e){let n=!1;for(let o=0,s=e.length;o<s;o++){const s=e[o];switch(s.type){case 0:this.onCompositionStart(s)&&(n=!0);break;case 1:this.onCompositionEnd(s)&&(n=!0);break;case 2:this.onConfigurationChanged(s)&&(n=!0);break;case 3:this.onCursorStateChanged(s)&&(n=!0);break;case 4:this.onDecorationsChanged(s)&&(n=!0);break;case 5:this.onFlushed(s)&&(n=!0);break;case 6:this.onFocusChanged(s)&&(n=!0);break;case 7:this.onLanguageConfigurationChanged(s)&&(n=!0);break;case 8:this.onLineMappingChanged(s)&&(n=!0);break;case 9:this.onLinesChanged(s)&&(n=!0);break;case 10:this.onLinesDeleted(s)&&(n=!0);break;case 11:this.onLinesInserted(s)&&(n=!0);break;case 12:this.onRevealRangeRequest(s)&&(n=!0);break;case 13:this.onScrollChanged(s)&&(n=!0);break;case 15:this.onTokensChanged(s)&&(n=!0);break;case 14:this.onThemeChanged(s)&&(n=!0);break;case 16:this.onTokensColorsChanged(s)&&(n=!0);break;case 17:this.onZonesChanged(s)&&(n=!0);break;default:console.info("View received unknown event: "),console.info(s)}}n&&(this._shouldRender=!0)}}