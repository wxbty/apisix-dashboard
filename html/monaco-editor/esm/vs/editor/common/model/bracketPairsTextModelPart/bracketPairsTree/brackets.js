import{escapeRegExpCharacters}from"../../../../../base/common/strings.js";import{BracketAstNode}from"./ast.js";import{toLength}from"./length.js";import{identityKeyProvider,SmallImmutableSet}from"./smallImmutableSet.js";import{Token}from"./tokenizer.js";export class BracketTokens{constructor(e){this.map=e,this.hasRegExp=!1,this._regExpGlobal=null}static createFromLanguage(e,t){function r(e,r){return t.getKey(`${e}:::${r}`)}const n=e.characterPair.getColorizedBrackets(),a=new Map,s=new Set;for(const[g,i]of n){s.add(g);let t=a.get(i);const n=r(e.languageId,g);t||(t={openingBrackets:SmallImmutableSet.getEmpty(),first:n},a.set(i,t)),t.openingBrackets=t.openingBrackets.add(n,identityKeyProvider)}const o=new Map;for(const[g,i]of a){const t=toLength(0,g.length);o.set(g,new Token(t,2,i.first,i.openingBrackets,BracketAstNode.create(t,e.languageId,i.openingBrackets)))}for(const g of s){const t=toLength(0,g.length),n=r(e.languageId,g),a=SmallImmutableSet.getEmpty().add(n,identityKeyProvider);o.set(g,new Token(t,1,n,a,BracketAstNode.create(t,e.languageId,a)))}return new BracketTokens(o)}getRegExpStr(){if(this.isEmpty)return null;{const e=[...this.map.keys()];return e.sort(),e.reverse(),e.map((e=>prepareBracketForRegExp(e))).join("|")}}get regExpGlobal(){if(!this.hasRegExp){const e=this.getRegExpStr();this._regExpGlobal=e?new RegExp(e,"g"):null,this.hasRegExp=!0}return this._regExpGlobal}getToken(e){return this.map.get(e)}findClosingTokenText(e){for(const[t,r]of this.map)if(r.bracketIds.intersects(e))return t}get isEmpty(){return 0===this.map.size}}function prepareBracketForRegExp(e){const t=escapeRegExpCharacters(e),r=/^[\w ]+$/.test(e);return r?`\\b${t}\\b`:t}export class LanguageAgnosticBracketTokens{constructor(e,t){this.denseKeyProvider=e,this.getLanguageConfiguration=t,this.languageIdToBracketTokens=new Map}didLanguageChange(e){const t=this.languageIdToBracketTokens.get(e);if(!t)return!1;const r=BracketTokens.createFromLanguage(this.getLanguageConfiguration(e),this.denseKeyProvider).getRegExpStr();return t.getRegExpStr()!==r}getSingleLanguageBracketTokens(e){let t=this.languageIdToBracketTokens.get(e);return t||(t=BracketTokens.createFromLanguage(this.getLanguageConfiguration(e),this.denseKeyProvider),this.languageIdToBracketTokens.set(e,t)),t}}