import{LanguageAgnosticBracketTokens}from"./bracketPairsTree/brackets.js";import{lengthAdd,lengthGetColumnCountIfZeroLineCount,lengthZero}from"./bracketPairsTree/length.js";import{parseDocument}from"./bracketPairsTree/parser.js";import{DenseKeyProvider}from"./bracketPairsTree/smallImmutableSet.js";import{TextBufferTokenizer}from"./bracketPairsTree/tokenizer.js";export function fixBracketsInLine(e,n){const t=new DenseKeyProvider,r=new LanguageAgnosticBracketTokens(t,(e=>n.getLanguageConfiguration(e))),i=new TextBufferTokenizer(new StaticTokenizerSource([e]),r),o=parseDocument(i,[],void 0,!0);let g="";const s=e.getLineContent();function l(e,n){if(2===e.kind)if(l(e.openingBracket,n),n=lengthAdd(n,e.openingBracket.length),e.child&&(l(e.child,n),n=lengthAdd(n,e.child.length)),e.closingBracket)l(e.closingBracket,n),n=lengthAdd(n,e.closingBracket.length);else{const n=r.getSingleLanguageBracketTokens(e.openingBracket.languageId),t=n.findClosingTokenText(e.openingBracket.bracketIds);g+=t}else if(3===e.kind);else if(0===e.kind||1===e.kind)g+=s.substring(lengthGetColumnCountIfZeroLineCount(n),lengthGetColumnCountIfZeroLineCount(lengthAdd(n,e.length)));else if(4===e.kind)for(const t of e.children)l(t,n),n=lengthAdd(n,t.length)}return l(o,lengthZero),g}class StaticTokenizerSource{constructor(e){this.lines=e}getLineCount(){return this.lines.length}getLineLength(e){return this.lines[e-1].getLineContent().length}getLineTokens(e){return this.lines[e-1]}}