import{ListAstNode}from"./ast.js";export function concat23Trees(e){if(0===e.length)return null;if(1===e.length)return e[0];let t=0;function n(){if(t>=e.length)return null;const n=t,i=e[n].listHeight;t++;while(t<e.length&&e[t].listHeight===i)t++;return t-n>=2?concat23TreesOfSameHeight(0===n&&t===e.length?e:e.slice(n,t),!1):e[n]}let i=n(),l=n();if(!l)return i;for(let h=n();h;h=n())heightDiff(i,l)<=heightDiff(l,h)?(i=concat(i,l),l=h):l=concat(l,h);const r=concat(i,l);return r}export function concat23TreesOfSameHeight(e,t=!1){if(0===e.length)return null;if(1===e.length)return e[0];let n=e.length;while(n>3){const i=n>>1;for(let l=0;l<i;l++){const i=l<<1;e[l]=ListAstNode.create23(e[i],e[i+1],i+3===n?e[i+2]:null,t)}n=i}return ListAstNode.create23(e[0],e[1],n>=3?e[2]:null,t)}function heightDiff(e,t){return Math.abs(e.listHeight-t.listHeight)}function concat(e,t){return e.listHeight===t.listHeight?ListAstNode.create23(e,t,null,!1):e.listHeight>t.listHeight?append(e,t):prepend(t,e)}function append(e,t){e=e.toMutable();let n=e;const i=new Array;let l;while(1){if(t.listHeight===n.listHeight){l=t;break}if(4!==n.kind)throw new Error("unexpected");i.push(n),n=n.makeLastElementMutable()}for(let r=i.length-1;r>=0;r--){const e=i[r];l?e.childrenLength>=3?l=ListAstNode.create23(e.unappendChild(),l,null,!1):(e.appendChildOfSameHeight(l),l=void 0):e.handleChildrenChanged()}return l?ListAstNode.create23(e,l,null,!1):e}function prepend(e,t){e=e.toMutable();let n=e;const i=new Array;while(t.listHeight!==n.listHeight){if(4!==n.kind)throw new Error("unexpected");i.push(n),n=n.makeFirstElementMutable()}let l=t;for(let r=i.length-1;r>=0;r--){const e=i[r];l?e.childrenLength>=3?l=ListAstNode.create23(l,e.unprependChild(),null,!1):(e.prependChildOfSameHeight(l),l=void 0):e.handleChildrenChanged()}return l?ListAstNode.create23(l,e,null,!1):e}