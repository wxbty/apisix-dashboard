import{arrayInsert}from"../../../base/common/arrays.js";import{toUint32}from"../../../base/common/uint.js";export class PrefixSumComputer{constructor(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}insertValues(e,i){e=toUint32(e);const t=this.values,s=this.prefixSum,r=i.length;return 0!==r&&(this.values=new Uint32Array(t.length+r),this.values.set(t.subarray(0,e),0),this.values.set(t.subarray(e),e+r),this.values.set(i,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(s.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}setValue(e,i){return e=toUint32(e),i=toUint32(i),this.values[e]!==i&&(this.values[e]=i,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)}removeValues(e,i){e=toUint32(e),i=toUint32(i);const t=this.values,s=this.prefixSum;if(e>=t.length)return!1;const r=t.length-e;return i>=r&&(i=r),0!==i&&(this.values=new Uint32Array(t.length-i),this.values.set(t.subarray(0,e),0),this.values.set(t.subarray(e+i),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(s.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalSum(){return 0===this.values.length?0:this._getPrefixSum(this.values.length-1)}getPrefixSum(e){return e<0?0:(e=toUint32(e),this._getPrefixSum(e))}_getPrefixSum(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];let i=this.prefixSumValidIndex[0]+1;0===i&&(this.prefixSum[0]=this.values[0],i++),e>=this.values.length&&(e=this.values.length-1);for(let t=i;t<=e;t++)this.prefixSum[t]=this.prefixSum[t-1]+this.values[t];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]}getIndexOf(e){e=Math.floor(e),this.getTotalSum();let i=0,t=this.values.length-1,s=0,r=0,u=0;while(i<=t)if(s=i+(t-i)/2|0,r=this.prefixSum[s],u=r-this.values[s],e<u)t=s-1;else{if(!(e>=r))break;i=s+1}return new PrefixSumIndexOfResult(s,e-u)}}export class ConstantTimePrefixSumComputer{constructor(e){this._values=e,this._isValid=!1,this._validEndIndex=-1,this._prefixSum=[],this._indexBySum=[]}getTotalSum(){return this._ensureValid(),this._indexBySum.length}getPrefixSum(e){return this._ensureValid(),0===e?0:this._prefixSum[e-1]}getIndexOf(e){this._ensureValid();const i=this._indexBySum[e],t=i>0?this._prefixSum[i-1]:0;return new PrefixSumIndexOfResult(i,e-t)}removeValues(e,i){this._values.splice(e,i),this._invalidate(e)}insertValues(e,i){this._values=arrayInsert(this._values,e,i),this._invalidate(e)}_invalidate(e){this._isValid=!1,this._validEndIndex=Math.min(this._validEndIndex,e-1)}_ensureValid(){if(!this._isValid){for(let e=this._validEndIndex+1,i=this._values.length;e<i;e++){const i=this._values[e],t=e>0?this._prefixSum[e-1]:0;this._prefixSum[e]=t+i;for(let s=0;s<i;s++)this._indexBySum[t+s]=e}this._prefixSum.length=this._values.length,this._indexBySum.length=this._prefixSum[this._prefixSum.length-1],this._isValid=!0,this._validEndIndex=this._values.length-1}}setValue(e,i){this._values[e]!==i&&(this._values[e]=i,this._invalidate(e))}}export class PrefixSumIndexOfResult{constructor(e,i){this.index=e,this.remainder=i,this._prefixSumIndexOfResultBrand=void 0,this.index=e,this.remainder=i}}