import{Range}from"../core/range.js";import{Searcher}from"../model/textModelSearch.js";import*as strings from"../../../base/common/strings.js";import{assertNever}from"../../../base/common/types.js";export class UnicodeTextModelHighlighter{static computeUnicodeHighlights(t,e,s){const i=s?s.startLineNumber:1,o=s?s.endLineNumber:t.getLineCount(),n=new CodePointHighlighter(e),r=n.getCandidateCodePoints();let a;a="allNonBasicAscii"===r?new RegExp("[^\\t\\n\\r\\x20-\\x7E]","g"):new RegExp(`${buildRegExpCharClassExpr(Array.from(r))}`,"g");const c=new Searcher(null,a),g=[];let h,l=!1,u=0,d=0,C=0;t:for(let m=i,f=o;m<=f;m++){const e=t.getLineContent(m),s=e.length;c.reset(0);do{if(h=c.next(e),h){let t=h.index,i=h.index+h[0].length;if(t>0){const s=e.charCodeAt(t-1);strings.isHighSurrogate(s)&&t--}if(i+1<s){const t=e.charCodeAt(i-1);strings.isHighSurrogate(t)&&i++}const o=e.substring(t,i),r=n.shouldHighlightNonBasicASCII(o);if(0!==r){3===r?u++:2===r?d++:1===r?C++:assertNever(r);const e=1e3;if(g.length>=e){l=!0;break t}g.push(new Range(m,t+1,m,i+1))}}}while(h)}return{ranges:g,hasMore:l,ambiguousCharacterCount:u,invisibleCharacterCount:d,nonBasicAsciiCharacterCount:C}}static computeUnicodeHighlightReason(t,e){const s=new CodePointHighlighter(e),i=s.shouldHighlightNonBasicASCII(t);switch(i){case 0:return null;case 2:return{kind:1};case 3:{const i=t.codePointAt(0),o=s.ambiguousCharacters.getPrimaryConfusable(i),n=strings.AmbiguousCharacters.getLocales().filter((t=>!strings.AmbiguousCharacters.getInstance(new Set([...e.allowedLocales,t])).isAmbiguous(i)));return{kind:0,confusableWith:String.fromCodePoint(o),notAmbiguousInLocales:n}}case 1:return{kind:2}}}}function buildRegExpCharClassExpr(t,e){const s=`[${strings.escapeRegExpCharacters(t.map((t=>String.fromCodePoint(t))).join(""))}]`;return s}class CodePointHighlighter{constructor(t){this.options=t,this.allowedCodePoints=new Set(t.allowedCodePoints),this.ambiguousCharacters=strings.AmbiguousCharacters.getInstance(new Set(t.allowedLocales))}getCandidateCodePoints(){if(this.options.nonBasicASCII)return"allNonBasicAscii";const t=new Set;if(this.options.invisibleCharacters)for(const e of strings.InvisibleCharacters.codePoints)t.add(e);if(this.options.ambiguousCharacters)for(const e of this.ambiguousCharacters.getConfusableCodePoints())t.add(e);for(const e of this.allowedCodePoints)t.delete(e);return t}shouldHighlightNonBasicASCII(t){const e=t.codePointAt(0);if(this.allowedCodePoints.has(e))return 0;if(this.options.nonBasicASCII)return 1;if(this.options.invisibleCharacters){const s=" "===t||"\n"===t||"\t"===t;if(!s&&strings.InvisibleCharacters.isInvisibleCharacter(e))return 2}return this.options.ambiguousCharacters&&this.ambiguousCharacters.isAmbiguous(e)?3:0}}