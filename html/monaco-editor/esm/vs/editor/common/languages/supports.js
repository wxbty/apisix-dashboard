export function createScopedLineTokens(t,e){const n=t.getCount(),s=t.findTokenIndexAtOffset(e),i=t.getLanguageId(s);let r=s;while(r+1<n&&t.getLanguageId(r+1)===i)r++;let o=s;while(o>0&&t.getLanguageId(o-1)===i)o--;return new ScopedLineTokens(t,i,o,r+1,t.getStartOffset(o),t.getEndOffset(r))}export class ScopedLineTokens{constructor(t,e,n,s,i,r){this._scopedLineTokensBrand=void 0,this._actual=t,this.languageId=e,this._firstTokenIndex=n,this._lastTokenIndex=s,this.firstCharOffset=i,this._lastCharOffset=r}getLineContent(){const t=this._actual.getLineContent();return t.substring(this.firstCharOffset,this._lastCharOffset)}getActualLineContentBefore(t){const e=this._actual.getLineContent();return e.substring(0,this.firstCharOffset+t)}getTokenCount(){return this._lastTokenIndex-this._firstTokenIndex}findTokenIndexAtOffset(t){return this._actual.findTokenIndexAtOffset(t+this.firstCharOffset)-this._firstTokenIndex}getStandardTokenType(t){return this._actual.getStandardTokenType(t+this._firstTokenIndex)}}export function ignoreBracketsInToken(t){return 0!==(3&t)}