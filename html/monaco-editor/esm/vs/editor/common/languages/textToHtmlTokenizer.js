var __awaiter=this&&this.__awaiter||function(e,t,n,o){function i(e){return e instanceof n?e:new n((function(t){t(e)}))}return new(n||(n=Promise))((function(n,a){function s(e){try{c(o.next(e))}catch(t){a(t)}}function r(e){try{c(o["throw"](e))}catch(t){a(t)}}function c(e){e.done?n(e.value):i(e.value).then(s,r)}c((o=o.apply(e,t||[])).next())}))};import*as strings from"../../../base/common/strings.js";import{LineTokens}from"../tokens/lineTokens.js";import{TokenizationRegistry}from"../languages.js";import{NullState,nullTokenizeEncoded}from"./nullMode.js";const fallback={getInitialState:()=>NullState,tokenizeEncoded:(e,t,n)=>nullTokenizeEncoded(0,n)};export function tokenizeToString(e,t,n){return __awaiter(this,void 0,void 0,(function*(){if(!n)return _tokenizeToString(t,e.languageIdCodec,fallback);const o=yield TokenizationRegistry.getOrCreate(n);return _tokenizeToString(t,e.languageIdCodec,o||fallback)}))}export function tokenizeLineToHTML(e,t,n,o,i,a,s){let r="<div>",c=o,l=0,f=!0;for(let u=0,k=t.getCount();u<k;u++){const k=t.getEndOffset(u);if(k<=o)continue;let g="";for(;c<k&&c<i;c++){const t=e.charCodeAt(c);switch(t){case 9:{let e=a-(c+l)%a;l+=e-1;while(e>0)s&&f?(g+="&#160;",f=!1):(g+=" ",f=!0),e--;break}case 60:g+="&lt;",f=!1;break;case 62:g+="&gt;",f=!1;break;case 38:g+="&amp;",f=!1;break;case 0:g+="&#00;",f=!1;break;case 65279:case 8232:case 8233:case 133:g+="\ufffd",f=!1;break;case 13:g+="&#8203",f=!1;break;case 32:s&&f?(g+="&#160;",f=!1):(g+=" ",f=!0);break;default:g+=String.fromCharCode(t),f=!1}}if(r+=`<span style="${t.getInlineStyle(u,n)}">${g}</span>`,k>i||c>=i)break}return r+="</div>",r}export function _tokenizeToString(e,t,n){let o='<div class="monaco-tokenized-source">';const i=strings.splitLines(e);let a=n.getInitialState();for(let s=0,r=i.length;s<r;s++){const e=i[s];s>0&&(o+="<br/>");const r=n.tokenizeEncoded(e,!0,a);LineTokens.convertToEndOffset(r.tokens,e.length);const c=new LineTokens(r.tokens,e,t),l=c.inflate();let f=0;for(let t=0,n=l.getCount();t<n;t++){const n=l.getClassName(t),i=l.getEndOffset(t);o+=`<span class="${n}">${strings.escape(e.substring(f,i))}</span>`,f=i}a=r.endState}return o+="</div>",o}