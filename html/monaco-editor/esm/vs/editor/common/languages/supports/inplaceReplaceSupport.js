export class BasicInplaceReplace{constructor(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}navigateValueSet(e,t,l,a,n){if(e&&t){const l=this.doNavigateValueSet(t,n);if(l)return{range:e,value:l}}if(l&&a){const e=this.doNavigateValueSet(a,n);if(e)return{range:l,value:e}}return null}doNavigateValueSet(e,t){const l=this.numberReplace(e,t);return null!==l?l:this.textReplace(e,t)}numberReplace(e,t){const l=Math.pow(10,e.length-(e.lastIndexOf(".")+1));let a=Number(e),n=parseFloat(e);return isNaN(a)||isNaN(n)||a!==n?null:0!==a||t?(a=Math.floor(a*l),a+=t?l:-l,String(a/l)):null}textReplace(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)}valueSetsReplace(e,t,l){let a=null;for(let n=0,r=e.length;null===a&&n<r;n++)a=this.valueSetReplace(e[n],t,l);return a}valueSetReplace(e,t,l){let a=e.indexOf(t);return a>=0?(a+=l?1:-1,a<0?a=e.length-1:a%=e.length,e[a]):null}}BasicInplaceReplace.INSTANCE=new BasicInplaceReplace;