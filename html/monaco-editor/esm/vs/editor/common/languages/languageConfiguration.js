export var IndentAction;(function(t){t[t["None"]=0]="None",t[t["Indent"]=1]="Indent",t[t["IndentOutdent"]=2]="IndentOutdent",t[t["Outdent"]=3]="Outdent"})(IndentAction||(IndentAction={}));export class StandardAutoClosingPairConditional{constructor(t){if(this._neutralCharacter=null,this._neutralCharacterSearched=!1,this.open=t.open,this.close=t.close,this._inString=!0,this._inComment=!0,this._inRegEx=!0,Array.isArray(t.notIn))for(let n=0,e=t.notIn.length;n<e;n++){const e=t.notIn[n];switch(e){case"string":this._inString=!1;break;case"comment":this._inComment=!1;break;case"regex":this._inRegEx=!1;break}}}isOK(t){switch(t){case 0:return!0;case 1:return this._inComment;case 2:return this._inString;case 3:return this._inRegEx}}shouldAutoClose(t,n){if(0===t.getTokenCount())return!0;const e=t.findTokenIndexAtOffset(n-2),r=t.getStandardTokenType(e);return this.isOK(r)}_findNeutralCharacterInRange(t,n){for(let e=t;e<=n;e++){const t=String.fromCharCode(e);if(!this.open.includes(t)&&!this.close.includes(t))return t}return null}findNeutralCharacter(){return this._neutralCharacterSearched||(this._neutralCharacterSearched=!0,this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(48,57)),this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(97,122)),this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(65,90))),this._neutralCharacter}}export class AutoClosingPairs{constructor(t){this.autoClosingPairsOpenByStart=new Map,this.autoClosingPairsOpenByEnd=new Map,this.autoClosingPairsCloseByStart=new Map,this.autoClosingPairsCloseByEnd=new Map,this.autoClosingPairsCloseSingleChar=new Map;for(const n of t)appendEntry(this.autoClosingPairsOpenByStart,n.open.charAt(0),n),appendEntry(this.autoClosingPairsOpenByEnd,n.open.charAt(n.open.length-1),n),appendEntry(this.autoClosingPairsCloseByStart,n.close.charAt(0),n),appendEntry(this.autoClosingPairsCloseByEnd,n.close.charAt(n.close.length-1),n),1===n.close.length&&1===n.open.length&&appendEntry(this.autoClosingPairsCloseSingleChar,n.close,n)}}function appendEntry(t,n,e){t.has(n)?t.get(n).push(e):t.set(n,[e])}