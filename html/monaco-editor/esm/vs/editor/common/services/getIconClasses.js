import{Schemas}from"../../../base/common/network.js";import{DataUri,basenameOrAuthority}from"../../../base/common/resources.js";import{PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";import{FileKind}from"../../../platform/files/common/files.js";export function getIconClasses(e,t,a,s){const i=s===FileKind.ROOT_FOLDER?["rootfolder-icon"]:s===FileKind.FOLDER?["folder-icon"]:["file-icon"];if(a){let n;if(a.scheme===Schemas.data){const e=DataUri.parseMetaData(a);n=e.get(DataUri.META_DATA_LABEL)}else n=cssEscape(basenameOrAuthority(a).toLowerCase());if(s===FileKind.FOLDER)i.push(`${n}-name-folder-icon`);else{if(n){if(i.push(`${n}-name-file-icon`),n.length<=255){const e=n.split(".");for(let t=1;t<e.length;t++)i.push(`${e.slice(t).join(".")}-ext-file-icon`)}i.push("ext-file-icon")}const s=detectLanguageId(e,t,a);s&&i.push(`${cssEscape(s)}-lang-file-icon`)}}return i}function detectLanguageId(e,t,a){if(!a)return null;let s=null;if(a.scheme===Schemas.data){const e=DataUri.parseMetaData(a),i=e.get(DataUri.META_DATA_MIME);i&&(s=t.getLanguageIdByMimeType(i))}else{const t=e.getModel(a);t&&(s=t.getLanguageId())}return s&&s!==PLAINTEXT_LANGUAGE_ID?s:t.guessLanguageIdByFilepathOrFirstLine(a)}export function cssEscape(e){return e.replace(/[\11\12\14\15\40]/g,"/")}