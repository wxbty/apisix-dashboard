import{parse}from"../../../base/common/glob.js";import{Mimes}from"../../../base/common/mime.js";import{Schemas}from"../../../base/common/network.js";import{basename,posix}from"../../../base/common/path.js";import{DataUri}from"../../../base/common/resources.js";import{startsWithUTF8BOM}from"../../../base/common/strings.js";let registeredAssociations=[],nonUserRegisteredAssociations=[],userRegisteredAssociations=[];export function registerLanguageAssociation(e,i=!1){const t=toLanguageAssociationItem(e);registeredAssociations.push(t),t.userConfigured?userRegisteredAssociations.push(t):nonUserRegisteredAssociations.push(t),i&&!t.userConfigured&&registeredAssociations.forEach((e=>{e.mime===t.mime||e.userConfigured||(t.extension&&e.extension===t.extension&&console.warn(`Overwriting extension <<${t.extension}>> to now point to mime <<${t.mime}>>`),t.filename&&e.filename===t.filename&&console.warn(`Overwriting filename <<${t.filename}>> to now point to mime <<${t.mime}>>`),t.filepattern&&e.filepattern===t.filepattern&&console.warn(`Overwriting filepattern <<${t.filepattern}>> to now point to mime <<${t.mime}>>`),t.firstline&&e.firstline===t.firstline&&console.warn(`Overwriting firstline <<${t.firstline}>> to now point to mime <<${t.mime}>>`))}))}function toLanguageAssociationItem(e){return{id:e.id,mime:e.mime,filename:e.filename,extension:e.extension,filepattern:e.filepattern,firstline:e.firstline,userConfigured:e.userConfigured,filenameLowercase:e.filename?e.filename.toLowerCase():void 0,extensionLowercase:e.extension?e.extension.toLowerCase():void 0,filepatternLowercase:e.filepattern?parse(e.filepattern.toLowerCase()):void 0,filepatternOnPath:!!e.filepattern&&e.filepattern.indexOf(posix.sep)>=0}}export function clearLanguageAssociations(e){e?(registeredAssociations=registeredAssociations.filter((e=>!e.userConfigured)),userRegisteredAssociations=[]):(registeredAssociations=[],nonUserRegisteredAssociations=[],userRegisteredAssociations=[])}export function getMimeTypes(e,i){let t;if(e)switch(e.scheme){case Schemas.file:t=e.fsPath;break;case Schemas.data:{const i=DataUri.parseMetaData(e);t=i.get(DataUri.META_DATA_LABEL);break}default:t=e.path}if(!t)return[Mimes.unknown];t=t.toLowerCase();const s=basename(t),n=getMimeByPath(t,s,userRegisteredAssociations);if(n)return[n,Mimes.text];const o=getMimeByPath(t,s,nonUserRegisteredAssociations);if(o)return[o,Mimes.text];if(i){const e=getMimeByFirstline(i);if(e)return[e,Mimes.text]}return[Mimes.unknown]}function getMimeByPath(e,i,t){var s;let n,o,r;for(let a=t.length-1;a>=0;a--){const m=t[a];if(i===m.filenameLowercase){n=m;break}if(m.filepattern&&(!o||m.filepattern.length>o.filepattern.length)){const t=m.filepatternOnPath?e:i;(null===(s=m.filepatternLowercase)||void 0===s?void 0:s.call(m,t))&&(o=m)}m.extension&&(!r||m.extension.length>r.extension.length)&&i.endsWith(m.extensionLowercase)&&(r=m)}return n?n.mime:o?o.mime:r?r.mime:void 0}function getMimeByFirstline(e){if(startsWithUTF8BOM(e)&&(e=e.substr(1)),e.length>0)for(let i=registeredAssociations.length-1;i>=0;i--){const t=registeredAssociations[i];if(!t.firstline)continue;const s=e.match(t.firstline);if(s&&s.length>0)return t.mime}}