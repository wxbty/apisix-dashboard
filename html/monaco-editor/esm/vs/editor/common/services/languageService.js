import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{LanguagesRegistry}from"./languagesRegistry.js";import{firstOrDefault}from"../../../base/common/arrays.js";import{TokenizationRegistry}from"../languages.js";import{PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";export class LanguageService extends Disposable{constructor(e=!1){super(),this._onDidEncounterLanguage=this._register(new Emitter),this.onDidEncounterLanguage=this._onDidEncounterLanguage.event,this._onDidChange=this._register(new Emitter({leakWarningThreshold:200})),this.onDidChange=this._onDidChange.event,LanguageService.instanceCount++,this._encounteredLanguages=new Set,this._registry=this._register(new LanguagesRegistry(!0,e)),this.languageIdCodec=this._registry.languageIdCodec,this._register(this._registry.onDidChange((()=>this._onDidChange.fire())))}dispose(){LanguageService.instanceCount--,super.dispose()}isRegisteredLanguageId(e){return this._registry.isRegisteredLanguageId(e)}getLanguageIdByLanguageName(e){return this._registry.getLanguageIdByLanguageName(e)}getLanguageIdByMimeType(e){return this._registry.getLanguageIdByMimeType(e)}guessLanguageIdByFilepathOrFirstLine(e,t){const i=this._registry.guessLanguageIdByFilepathOrFirstLine(e,t);return firstOrDefault(i,null)}createById(e){return new LanguageSelection(this.onDidChange,(()=>this._createAndGetLanguageIdentifier(e)))}createByFilepathOrFirstLine(e,t){return new LanguageSelection(this.onDidChange,(()=>{const i=this.guessLanguageIdByFilepathOrFirstLine(e,t);return this._createAndGetLanguageIdentifier(i)}))}_createAndGetLanguageIdentifier(e){return e&&this.isRegisteredLanguageId(e)||(e=PLAINTEXT_LANGUAGE_ID),this._encounteredLanguages.has(e)||(this._encounteredLanguages.add(e),TokenizationRegistry.getOrCreate(e),this._onDidEncounterLanguage.fire(e)),e}}LanguageService.instanceCount=0;class LanguageSelection{constructor(e,t){this._onDidChangeLanguages=e,this._selector=t,this._listener=null,this._emitter=null,this.languageId=this._selector()}_dispose(){this._listener&&(this._listener.dispose(),this._listener=null),this._emitter&&(this._emitter.dispose(),this._emitter=null)}get onDidChange(){return this._listener||(this._listener=this._onDidChangeLanguages((()=>this._evaluate()))),this._emitter||(this._emitter=new Emitter({onLastListenerRemove:()=>{this._dispose()}})),this._emitter.event}_evaluate(){const e=this._selector();e!==this.languageId&&(this.languageId=e,this._emitter&&this._emitter.fire(this.languageId))}}