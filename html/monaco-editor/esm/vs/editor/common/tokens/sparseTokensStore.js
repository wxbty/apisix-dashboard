import*as arrays from"../../../base/common/arrays.js";import{LineTokens}from"./lineTokens.js";export class SparseTokensStore{constructor(e){this._pieces=[],this._isComplete=!1,this._languageIdCodec=e}flush(){this._pieces=[],this._isComplete=!1}isEmpty(){return 0===this._pieces.length}set(e,t){this._pieces=e||[],this._isComplete=t}setPartial(e,t){let i=e;if(t.length>0){const n=t[0].getRange(),s=t[t.length-1].getRange();if(!n||!s)return e;i=e.plusRange(n).plusRange(s)}let n=null;for(let s=0,r=this._pieces.length;s<r;s++){const e=this._pieces[s];if(e.endLineNumber<i.startLineNumber)continue;if(e.startLineNumber>i.endLineNumber){n=n||{index:s};break}if(e.removeTokens(i),e.isEmpty()){this._pieces.splice(s,1),s--,r--;continue}if(e.endLineNumber<i.startLineNumber)continue;if(e.startLineNumber>i.endLineNumber){n=n||{index:s};continue}const[t,a]=e.split(i);t.isEmpty()?n=n||{index:s}:a.isEmpty()||(this._pieces.splice(s,1,t,a),s++,r++,n=n||{index:s})}return n=n||{index:this._pieces.length},t.length>0&&(this._pieces=arrays.arrayInsert(this._pieces,n.index,t)),i}isComplete(){return this._isComplete}addSparseTokens(e,t){const i=this._pieces;if(0===i.length)return t;const n=SparseTokensStore._findFirstPieceWithLine(i,e),s=i[n].getLineTokens(e);if(!s)return t;const r=t.getCount(),a=s.getCount();let o=0;const c=[];let l=0,h=0;const g=(e,t)=>{e!==h&&(h=e,c[l++]=e,c[l++]=t)};for(let d=0;d<a;d++){const e=s.getStartCharacter(d),i=s.getEndCharacter(d),n=s.getMetadata(d),a=((1&n?1024:0)|(2&n?2048:0)|(4&n?4096:0)|(8&n?8192:0)|(16&n?8372224:0)|(32&n?4286578688:0))>>>0,c=~a>>>0;while(o<r&&t.getEndOffset(o)<=e)g(t.getEndOffset(o),t.getMetadata(o)),o++;o<r&&t.getStartOffset(o)<e&&g(e,t.getMetadata(o));while(o<r&&t.getEndOffset(o)<i)g(t.getEndOffset(o),t.getMetadata(o)&c|n&a),o++;if(o<r)g(i,t.getMetadata(o)&c|n&a),t.getEndOffset(o)===i&&o++;else{const e=Math.min(Math.max(0,o-1),r-1);g(i,t.getMetadata(e)&c|n&a)}}while(o<r)g(t.getEndOffset(o),t.getMetadata(o)),o++;return new LineTokens(new Uint32Array(c),t.getLineContent(),this._languageIdCodec)}static _findFirstPieceWithLine(e,t){let i=0,n=e.length-1;while(i<n){let s=i+Math.floor((n-i)/2);if(e[s].endLineNumber<t)i=s+1;else{if(!(e[s].startLineNumber>t)){while(s>i&&e[s-1].startLineNumber<=t&&t<=e[s-1].endLineNumber)s--;return s}n=s-1}}return i}acceptEdit(e,t,i,n,s){for(const r of this._pieces)r.acceptEdit(e,t,i,n,s)}}