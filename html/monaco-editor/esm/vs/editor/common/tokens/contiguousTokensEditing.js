import{LineTokens}from"./lineTokens.js";export const EMPTY_LINE_TOKENS=new Uint32Array(0).buffer;export class ContiguousTokensEditing{static deleteBeginning(n,t){return null===n||n===EMPTY_LINE_TOKENS?n:ContiguousTokensEditing.delete(n,0,t)}static deleteEnding(n,t){if(null===n||n===EMPTY_LINE_TOKENS)return n;const e=toUint32Array(n),r=e[e.length-2];return ContiguousTokensEditing.delete(n,t,r)}static delete(n,t,e){if(null===n||n===EMPTY_LINE_TOKENS||t===e)return n;const r=toUint32Array(n),i=r.length>>>1;if(0===t&&r[r.length-2]===e)return EMPTY_LINE_TOKENS;const o=LineTokens.findIndexInTokensArray(r,t),l=o>0?r[o-1<<1]:0,s=r[o<<1];if(e<s){const l=e-t;for(let n=o;n<i;n++)r[n<<1]-=l;return n}let u,E;l!==t?(r[o<<1]=t,u=o+1<<1,E=t):(u=o<<1,E=l);const f=e-t;for(let a=o+1;a<i;a++){const n=r[a<<1]-f;n>E&&(r[u++]=n,r[u++]=r[1+(a<<1)],E=n)}if(u===r.length)return n;const T=new Uint32Array(u);return T.set(r.subarray(0,u),0),T.buffer}static append(n,t){if(t===EMPTY_LINE_TOKENS)return n;if(n===EMPTY_LINE_TOKENS)return t;if(null===n)return n;if(null===t)return null;const e=toUint32Array(n),r=toUint32Array(t),i=r.length>>>1,o=new Uint32Array(e.length+r.length);o.set(e,0);let l=e.length;const s=e[e.length-2];for(let u=0;u<i;u++)o[l++]=r[u<<1]+s,o[l++]=r[1+(u<<1)];return o.buffer}static insert(n,t,e){if(null===n||n===EMPTY_LINE_TOKENS)return n;const r=toUint32Array(n),i=r.length>>>1;let o=LineTokens.findIndexInTokensArray(r,t);if(o>0){const n=r[o-1<<1];n===t&&o--}for(let l=o;l<i;l++)r[l<<1]+=e;return n}}export function toUint32Array(n){return n instanceof Uint32Array?n:new Uint32Array(n)}