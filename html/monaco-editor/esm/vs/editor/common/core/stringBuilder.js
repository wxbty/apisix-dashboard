import*as strings from"../../../base/common/strings.js";import*as platform from"../../../base/common/platform.js";import*as buffer from"../../../base/common/buffer.js";let _utf16LE_TextDecoder,_utf16BE_TextDecoder,_platformTextDecoder;function getUTF16LE_TextDecoder(){return _utf16LE_TextDecoder||(_utf16LE_TextDecoder=new TextDecoder("UTF-16LE")),_utf16LE_TextDecoder}function getUTF16BE_TextDecoder(){return _utf16BE_TextDecoder||(_utf16BE_TextDecoder=new TextDecoder("UTF-16BE")),_utf16BE_TextDecoder}export function getPlatformTextDecoder(){return _platformTextDecoder||(_platformTextDecoder=platform.isLittleEndian()?getUTF16LE_TextDecoder():getUTF16BE_TextDecoder()),_platformTextDecoder}export const hasTextDecoder="undefined"!==typeof TextDecoder;export let createStringBuilder;export let decodeUTF16LE;function standardDecodeUTF16LE(e,t,r){const i=new Uint16Array(e.buffer,t,r);return r>0&&(65279===i[0]||65534===i[0])?compatDecodeUTF16LE(e,t,r):getUTF16LE_TextDecoder().decode(i)}function compatDecodeUTF16LE(e,t,r){const i=[];let s=0;for(let o=0;o<r;o++){const r=buffer.readUInt16LE(e,t);t+=2,i[s++]=String.fromCharCode(r)}return i.join("")}hasTextDecoder?(createStringBuilder=e=>new StringBuilder(e),decodeUTF16LE=standardDecodeUTF16LE):(createStringBuilder=e=>new CompatStringBuilder,decodeUTF16LE=compatDecodeUTF16LE);class StringBuilder{constructor(e){this._capacity=0|e,this._buffer=new Uint16Array(this._capacity),this._completedStrings=null,this._bufferLength=0}reset(){this._completedStrings=null,this._bufferLength=0}build(){return null!==this._completedStrings?(this._flushBuffer(),this._completedStrings.join("")):this._buildBuffer()}_buildBuffer(){if(0===this._bufferLength)return"";const e=new Uint16Array(this._buffer.buffer,0,this._bufferLength);return getPlatformTextDecoder().decode(e)}_flushBuffer(){const e=this._buildBuffer();this._bufferLength=0,null===this._completedStrings?this._completedStrings=[e]:this._completedStrings[this._completedStrings.length]=e}write1(e){const t=this._capacity-this._bufferLength;t<=1&&(0===t||strings.isHighSurrogate(e))&&this._flushBuffer(),this._buffer[this._bufferLength++]=e}appendASCII(e){this._bufferLength===this._capacity&&this._flushBuffer(),this._buffer[this._bufferLength++]=e}appendASCIIString(e){const t=e.length;if(this._bufferLength+t>=this._capacity)return this._flushBuffer(),void(this._completedStrings[this._completedStrings.length]=e);for(let r=0;r<t;r++)this._buffer[this._bufferLength++]=e.charCodeAt(r)}}class CompatStringBuilder{constructor(){this._pieces=[],this._piecesLen=0}reset(){this._pieces=[],this._piecesLen=0}build(){return this._pieces.join("")}write1(e){this._pieces[this._piecesLen++]=String.fromCharCode(e)}appendASCII(e){this._pieces[this._piecesLen++]=String.fromCharCode(e)}appendASCIIString(e){this._pieces[this._piecesLen++]=e}}