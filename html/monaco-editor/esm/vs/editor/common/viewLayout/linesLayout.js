import*as strings from"../../../base/common/strings.js";class PendingChanges{constructor(){this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[]}insert(e){this._hasPending=!0,this._inserts.push(e)}change(e){this._hasPending=!0,this._changes.push(e)}remove(e){this._hasPending=!0,this._removes.push(e)}mustCommit(){return this._hasPending}commit(e){if(!this._hasPending)return;const t=this._inserts,i=this._changes,s=this._removes;this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[],e._commitPendingChanges(t,i,s)}}export class EditorWhitespace{constructor(e,t,i,s,n){this.id=e,this.afterLineNumber=t,this.ordinal=i,this.height=s,this.minWidth=n,this.prefixSum=0}}export class LinesLayout{constructor(e,t,i,s){this._instanceId=strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT),this._pendingChanges=new PendingChanges,this._lastWhitespaceId=0,this._arr=[],this._prefixSumValidIndex=-1,this._minWidth=-1,this._lineCount=e,this._lineHeight=t,this._paddingTop=i,this._paddingBottom=s}static findInsertionIndex(e,t,i){let s=0,n=e.length;while(s<n){const h=s+n>>>1;t===e[h].afterLineNumber?i<e[h].ordinal?n=h:s=h+1:t<e[h].afterLineNumber?n=h:s=h+1}return s}setLineHeight(e){this._checkPendingChanges(),this._lineHeight=e}setPadding(e,t){this._paddingTop=e,this._paddingBottom=t}onFlushed(e){this._checkPendingChanges(),this._lineCount=e}changeWhitespace(e){let t=!1;try{const i={insertWhitespace:(e,i,s,n)=>{t=!0,e|=0,i|=0,s|=0,n|=0;const h=this._instanceId+ ++this._lastWhitespaceId;return this._pendingChanges.insert(new EditorWhitespace(h,e,i,s,n)),h},changeOneWhitespace:(e,i,s)=>{t=!0,i|=0,s|=0,this._pendingChanges.change({id:e,newAfterLineNumber:i,newHeight:s})},removeWhitespace:e=>{t=!0,this._pendingChanges.remove({id:e})}};e(i)}finally{this._pendingChanges.commit(this)}return t}_commitPendingChanges(e,t,i){if((e.length>0||i.length>0)&&(this._minWidth=-1),e.length+t.length+i.length<=1){for(const t of e)this._insertWhitespace(t);for(const e of t)this._changeOneWhitespace(e.id,e.newAfterLineNumber,e.newHeight);for(const e of i){const t=this._findWhitespaceIndex(e.id);-1!==t&&this._removeWhitespace(t)}return}const s=new Set;for(const a of i)s.add(a.id);const n=new Map;for(const a of t)n.set(a.id,a);const h=e=>{const t=[];for(const i of e)if(!s.has(i.id)){if(n.has(i.id)){const e=n.get(i.id);i.afterLineNumber=e.newAfterLineNumber,i.height=e.newHeight}t.push(i)}return t},r=h(this._arr).concat(h(e));r.sort(((e,t)=>e.afterLineNumber===t.afterLineNumber?e.ordinal-t.ordinal:e.afterLineNumber-t.afterLineNumber)),this._arr=r,this._prefixSumValidIndex=-1}_checkPendingChanges(){this._pendingChanges.mustCommit()&&this._pendingChanges.commit(this)}_insertWhitespace(e){const t=LinesLayout.findInsertionIndex(this._arr,e.afterLineNumber,e.ordinal);this._arr.splice(t,0,e),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,t-1)}_findWhitespaceIndex(e){const t=this._arr;for(let i=0,s=t.length;i<s;i++)if(t[i].id===e)return i;return-1}_changeOneWhitespace(e,t,i){const s=this._findWhitespaceIndex(e);if(-1!==s&&(this._arr[s].height!==i&&(this._arr[s].height=i,this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,s-1)),this._arr[s].afterLineNumber!==t)){const e=this._arr[s];this._removeWhitespace(s),e.afterLineNumber=t,this._insertWhitespace(e)}}_removeWhitespace(e){this._arr.splice(e,1),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,e-1)}onLinesDeleted(e,t){this._checkPendingChanges(),e|=0,t|=0,this._lineCount-=t-e+1;for(let i=0,s=this._arr.length;i<s;i++){const s=this._arr[i].afterLineNumber;e<=s&&s<=t?this._arr[i].afterLineNumber=e-1:s>t&&(this._arr[i].afterLineNumber-=t-e+1)}}onLinesInserted(e,t){this._checkPendingChanges(),e|=0,t|=0,this._lineCount+=t-e+1;for(let i=0,s=this._arr.length;i<s;i++){const s=this._arr[i].afterLineNumber;e<=s&&(this._arr[i].afterLineNumber+=t-e+1)}}getWhitespacesTotalHeight(){return this._checkPendingChanges(),0===this._arr.length?0:this.getWhitespacesAccumulatedHeight(this._arr.length-1)}getWhitespacesAccumulatedHeight(e){this._checkPendingChanges(),e|=0;let t=Math.max(0,this._prefixSumValidIndex+1);0===t&&(this._arr[0].prefixSum=this._arr[0].height,t++);for(let i=t;i<=e;i++)this._arr[i].prefixSum=this._arr[i-1].prefixSum+this._arr[i].height;return this._prefixSumValidIndex=Math.max(this._prefixSumValidIndex,e),this._arr[e].prefixSum}getLinesTotalHeight(){this._checkPendingChanges();const e=this._lineHeight*this._lineCount,t=this.getWhitespacesTotalHeight();return e+t+this._paddingTop+this._paddingBottom}getWhitespaceAccumulatedHeightBeforeLineNumber(e){this._checkPendingChanges(),e|=0;const t=this._findLastWhitespaceBeforeLineNumber(e);return-1===t?0:this.getWhitespacesAccumulatedHeight(t)}_findLastWhitespaceBeforeLineNumber(e){e|=0;const t=this._arr;let i=0,s=t.length-1;while(i<=s){const n=s-i|0,h=n/2|0,r=i+h|0;if(t[r].afterLineNumber<e){if(r+1>=t.length||t[r+1].afterLineNumber>=e)return r;i=r+1|0}else s=r-1|0}return-1}_findFirstWhitespaceAfterLineNumber(e){e|=0;const t=this._findLastWhitespaceBeforeLineNumber(e),i=t+1;return i<this._arr.length?i:-1}getFirstWhitespaceIndexAfterLineNumber(e){return this._checkPendingChanges(),e|=0,this._findFirstWhitespaceAfterLineNumber(e)}getVerticalOffsetForLineNumber(e){let t;this._checkPendingChanges(),e|=0,t=e>1?this._lineHeight*(e-1):0;const i=this.getWhitespaceAccumulatedHeightBeforeLineNumber(e);return t+i+this._paddingTop}getWhitespaceMinWidth(){if(this._checkPendingChanges(),-1===this._minWidth){let e=0;for(let t=0,i=this._arr.length;t<i;t++)e=Math.max(e,this._arr[t].minWidth);this._minWidth=e}return this._minWidth}isAfterLines(e){this._checkPendingChanges();const t=this.getLinesTotalHeight();return e>t}isInTopPadding(e){return 0!==this._paddingTop&&(this._checkPendingChanges(),e<this._paddingTop)}isInBottomPadding(e){if(0===this._paddingBottom)return!1;this._checkPendingChanges();const t=this.getLinesTotalHeight();return e>=t-this._paddingBottom}getLineNumberAtOrAfterVerticalOffset(e){if(this._checkPendingChanges(),e|=0,e<0)return 1;const t=0|this._lineCount,i=this._lineHeight;let s=1,n=t;while(s<n){const t=(s+n)/2|0,h=0|this.getVerticalOffsetForLineNumber(t);if(e>=h+i)s=t+1;else{if(e>=h)return t;n=t}}return s>t?t:s}getLinesViewportData(e,t){this._checkPendingChanges(),e|=0,t|=0;const i=this._lineHeight,s=0|this.getLineNumberAtOrAfterVerticalOffset(e),n=0|this.getVerticalOffsetForLineNumber(s);let h=0|this._lineCount,r=0|this.getFirstWhitespaceIndexAfterLineNumber(s);const a=0|this.getWhitespacesCount();let c,g;-1===r?(r=a,g=h+1,c=0):(g=0|this.getAfterLineNumberForWhitespaceIndex(r),c=0|this.getHeightForWhitespaceIndex(r));let o=n,d=o;const f=5e5;let _=0;n>=f&&(_=Math.floor(n/f)*f,_=Math.floor(_/i)*i,d-=_);const u=[],l=e+(t-e)/2;let p=-1;for(let x=s;x<=h;x++){if(-1===p){const e=o,t=o+i;(e<=l&&l<t||e>l)&&(p=x)}o+=i,u[x-s]=d,d+=i;while(g===x)d+=c,o+=c,r++,r>=a?g=h+1:(g=0|this.getAfterLineNumberForWhitespaceIndex(r),c=0|this.getHeightForWhitespaceIndex(r));if(o>=t){h=x;break}}-1===p&&(p=h);const m=0|this.getVerticalOffsetForLineNumber(h);let W=s,L=h;return W<L&&n<e&&W++,W<L&&m+i>t&&L--,{bigNumbersDelta:_,startLineNumber:s,endLineNumber:h,relativeVerticalOffset:u,centeredLineNumber:p,completelyVisibleStartLineNumber:W,completelyVisibleEndLineNumber:L}}getVerticalOffsetForWhitespaceIndex(e){this._checkPendingChanges(),e|=0;const t=this.getAfterLineNumberForWhitespaceIndex(e);let i,s;return i=t>=1?this._lineHeight*t:0,s=e>0?this.getWhitespacesAccumulatedHeight(e-1):0,i+s+this._paddingTop}getWhitespaceIndexAtOrAfterVerticallOffset(e){this._checkPendingChanges(),e|=0;let t=0,i=this.getWhitespacesCount()-1;if(i<0)return-1;const s=this.getVerticalOffsetForWhitespaceIndex(i),n=this.getHeightForWhitespaceIndex(i);if(e>=s+n)return-1;while(t<i){const s=Math.floor((t+i)/2),n=this.getVerticalOffsetForWhitespaceIndex(s),h=this.getHeightForWhitespaceIndex(s);if(e>=n+h)t=s+1;else{if(e>=n)return s;i=s}}return t}getWhitespaceAtVerticalOffset(e){this._checkPendingChanges(),e|=0;const t=this.getWhitespaceIndexAtOrAfterVerticallOffset(e);if(t<0)return null;if(t>=this.getWhitespacesCount())return null;const i=this.getVerticalOffsetForWhitespaceIndex(t);if(i>e)return null;const s=this.getHeightForWhitespaceIndex(t),n=this.getIdForWhitespaceIndex(t),h=this.getAfterLineNumberForWhitespaceIndex(t);return{id:n,afterLineNumber:h,verticalOffset:i,height:s}}getWhitespaceViewportData(e,t){this._checkPendingChanges(),e|=0,t|=0;const i=this.getWhitespaceIndexAtOrAfterVerticallOffset(e),s=this.getWhitespacesCount()-1;if(i<0)return[];const n=[];for(let h=i;h<=s;h++){const e=this.getVerticalOffsetForWhitespaceIndex(h),i=this.getHeightForWhitespaceIndex(h);if(e>=t)break;n.push({id:this.getIdForWhitespaceIndex(h),afterLineNumber:this.getAfterLineNumberForWhitespaceIndex(h),verticalOffset:e,height:i})}return n}getWhitespaces(){return this._checkPendingChanges(),this._arr.slice(0)}getWhitespacesCount(){return this._checkPendingChanges(),this._arr.length}getIdForWhitespaceIndex(e){return this._checkPendingChanges(),e|=0,this._arr[e].id}getAfterLineNumberForWhitespaceIndex(e){return this._checkPendingChanges(),e|=0,this._arr[e].afterLineNumber}getHeightForWhitespaceIndex(e){return this._checkPendingChanges(),e|=0,this._arr[e].height}}LinesLayout.INSTANCE_COUNT=0;