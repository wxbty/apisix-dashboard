import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{Scrollable}from"../../../base/common/scrollable.js";import{LinesLayout}from"./linesLayout.js";import{Viewport}from"../viewModel/viewModel.js";import{ContentSizeChangedEvent}from"../viewModel/viewModelEventDispatcher.js";const SMOOTH_SCROLLING_TIME=125;class EditorScrollDimensions{constructor(t,e,o,i){t|=0,e|=0,o|=0,i|=0,t<0&&(t=0),e<0&&(e=0),o<0&&(o=0),i<0&&(i=0),this.width=t,this.contentWidth=e,this.scrollWidth=Math.max(t,e),this.height=o,this.contentHeight=i,this.scrollHeight=Math.max(o,i)}equals(t){return this.width===t.width&&this.contentWidth===t.contentWidth&&this.height===t.height&&this.contentHeight===t.contentHeight}}class EditorScrollable extends Disposable{constructor(t,e){super(),this._onDidContentSizeChange=this._register(new Emitter),this.onDidContentSizeChange=this._onDidContentSizeChange.event,this._dimensions=new EditorScrollDimensions(0,0,0,0),this._scrollable=this._register(new Scrollable({forceIntegerValues:!0,smoothScrollDuration:t,scheduleAtNextAnimationFrame:e})),this.onDidScroll=this._scrollable.onScroll}getScrollable(){return this._scrollable}setSmoothScrollDuration(t){this._scrollable.setSmoothScrollDuration(t)}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}getScrollDimensions(){return this._dimensions}setScrollDimensions(t){if(this._dimensions.equals(t))return;const e=this._dimensions;this._dimensions=t,this._scrollable.setScrollDimensions({width:t.width,scrollWidth:t.scrollWidth,height:t.height,scrollHeight:t.scrollHeight},!0);const o=e.contentWidth!==t.contentWidth,i=e.contentHeight!==t.contentHeight;(o||i)&&this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(e.contentWidth,e.contentHeight,t.contentWidth,t.contentHeight))}getFutureScrollPosition(){return this._scrollable.getFutureScrollPosition()}getCurrentScrollPosition(){return this._scrollable.getCurrentScrollPosition()}setScrollPositionNow(t){this._scrollable.setScrollPositionNow(t)}setScrollPositionSmooth(t){this._scrollable.setScrollPositionSmooth(t)}}export class ViewLayout extends Disposable{constructor(t,e,o){super(),this._configuration=t;const i=this._configuration.options,s=i.get(131),l=i.get(75);this._linesLayout=new LinesLayout(e,i.get(59),l.top,l.bottom),this._scrollable=this._register(new EditorScrollable(0,o)),this._configureSmoothScrollDuration(),this._scrollable.setScrollDimensions(new EditorScrollDimensions(s.contentWidth,0,s.height,0)),this.onDidScroll=this._scrollable.onDidScroll,this.onDidContentSizeChange=this._scrollable.onDidContentSizeChange,this._updateHeight()}dispose(){super.dispose()}getScrollable(){return this._scrollable.getScrollable()}onHeightMaybeChanged(){this._updateHeight()}_configureSmoothScrollDuration(){this._scrollable.setSmoothScrollDuration(this._configuration.options.get(103)?SMOOTH_SCROLLING_TIME:0)}onConfigurationChanged(t){const e=this._configuration.options;if(t.hasChanged(59)&&this._linesLayout.setLineHeight(e.get(59)),t.hasChanged(75)){const t=e.get(75);this._linesLayout.setPadding(t.top,t.bottom)}if(t.hasChanged(131)){const t=e.get(131),o=t.contentWidth,i=t.height,s=this._scrollable.getScrollDimensions(),l=s.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(o,s.contentWidth,i,this._getContentHeight(o,i,l)))}else this._updateHeight();t.hasChanged(103)&&this._configureSmoothScrollDuration()}onFlushed(t){this._linesLayout.onFlushed(t)}onLinesDeleted(t,e){this._linesLayout.onLinesDeleted(t,e)}onLinesInserted(t,e){this._linesLayout.onLinesInserted(t,e)}_getHorizontalScrollbarHeight(t,e){const o=this._configuration.options,i=o.get(92);return 2===i.horizontal||t>=e?0:i.horizontalScrollbarSize}_getContentHeight(t,e,o){const i=this._configuration.options;let s=this._linesLayout.getLinesTotalHeight();return i.get(94)?s+=Math.max(0,e-i.get(59)-i.get(75).bottom):s+=this._getHorizontalScrollbarHeight(t,o),s}_updateHeight(){const t=this._scrollable.getScrollDimensions(),e=t.width,o=t.height,i=t.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(e,t.contentWidth,o,this._getContentHeight(e,o,i)))}getCurrentViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getCurrentScrollPosition();return new Viewport(e.scrollTop,e.scrollLeft,t.width,t.height)}getFutureViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getFutureScrollPosition();return new Viewport(e.scrollTop,e.scrollLeft,t.width,t.height)}_computeContentWidth(t){const e=this._configuration.options,o=e.get(132),i=e.get(44);if(o.isViewportWrapping){const o=e.get(131),s=e.get(65);return t>o.contentWidth+i.typicalHalfwidthCharacterWidth&&s.enabled&&"right"===s.side?t+o.verticalScrollbarWidth:t}{const o=e.get(93)*i.typicalHalfwidthCharacterWidth,s=this._linesLayout.getWhitespaceMinWidth();return Math.max(t+o,s)}}setMaxLineWidth(t){const e=this._scrollable.getScrollDimensions();this._scrollable.setScrollDimensions(new EditorScrollDimensions(e.width,this._computeContentWidth(t),e.height,e.contentHeight)),this._updateHeight()}saveState(){const t=this._scrollable.getFutureScrollPosition(),e=t.scrollTop,o=this._linesLayout.getLineNumberAtOrAfterVerticalOffset(e),i=this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(o);return{scrollTop:e,scrollTopWithoutViewZones:e-i,scrollLeft:t.scrollLeft}}changeWhitespace(t){const e=this._linesLayout.changeWhitespace(t);return e&&this.onHeightMaybeChanged(),e}getVerticalOffsetForLineNumber(t){return this._linesLayout.getVerticalOffsetForLineNumber(t)}isAfterLines(t){return this._linesLayout.isAfterLines(t)}isInTopPadding(t){return this._linesLayout.isInTopPadding(t)}isInBottomPadding(t){return this._linesLayout.isInBottomPadding(t)}getLineNumberAtVerticalOffset(t){return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(t)}getWhitespaceAtVerticalOffset(t){return this._linesLayout.getWhitespaceAtVerticalOffset(t)}getLinesViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getLinesViewportData(t.top,t.top+t.height)}getLinesViewportDataAtScrollTop(t){const e=this._scrollable.getScrollDimensions();return t+e.height>e.scrollHeight&&(t=e.scrollHeight-e.height),t<0&&(t=0),this._linesLayout.getLinesViewportData(t,t+e.height)}getWhitespaceViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getWhitespaceViewportData(t.top,t.top+t.height)}getWhitespaces(){return this._linesLayout.getWhitespaces()}getContentWidth(){const t=this._scrollable.getScrollDimensions();return t.contentWidth}getScrollWidth(){const t=this._scrollable.getScrollDimensions();return t.scrollWidth}getContentHeight(){const t=this._scrollable.getScrollDimensions();return t.contentHeight}getScrollHeight(){const t=this._scrollable.getScrollDimensions();return t.scrollHeight}getCurrentScrollLeft(){const t=this._scrollable.getCurrentScrollPosition();return t.scrollLeft}getCurrentScrollTop(){const t=this._scrollable.getCurrentScrollPosition();return t.scrollTop}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}setScrollPosition(t,e){1===e?this._scrollable.setScrollPositionNow(t):this._scrollable.setScrollPositionSmooth(t)}deltaScrollNow(t,e){const o=this._scrollable.getCurrentScrollPosition();this._scrollable.setScrollPositionNow({scrollLeft:o.scrollLeft+t,scrollTop:o.scrollTop+e})}}