import{compareBy,findLastMaxBy,findMinBy}from"../../../base/common/arrays.js";import{CursorState}from"./cursorCommon.js";import{Cursor}from"./oneCursor.js";import{Position}from"../core/position.js";import{Range}from"../core/range.js";import{Selection}from"../core/selection.js";export class CursorCollection{constructor(t){this.context=t,this.cursors=[new Cursor(t)],this.lastAddedCursorIndex=0}dispose(){for(const t of this.cursors)t.dispose(this.context)}startTrackingSelections(){for(const t of this.cursors)t.startTrackingSelection(this.context)}stopTrackingSelections(){for(const t of this.cursors)t.stopTrackingSelection(this.context)}updateContext(t){this.context=t}ensureValidState(){for(const t of this.cursors)t.ensureValidState(this.context)}readSelectionFromMarkers(){return this.cursors.map((t=>t.readSelectionFromMarkers(this.context)))}getAll(){return this.cursors.map((t=>t.asCursorState()))}getViewPositions(){return this.cursors.map((t=>t.viewState.position))}getTopMostViewPosition(){return findMinBy(this.cursors,compareBy((t=>t.viewState.position),Position.compare)).viewState.position}getBottomMostViewPosition(){return findLastMaxBy(this.cursors,compareBy((t=>t.viewState.position),Position.compare)).viewState.position}getSelections(){return this.cursors.map((t=>t.modelState.selection))}getViewSelections(){return this.cursors.map((t=>t.viewState.selection))}setSelections(t){this.setStates(CursorState.fromModelSelections(t))}getPrimaryCursor(){return this.cursors[0].asCursorState()}setStates(t){null!==t&&(this.cursors[0].setState(this.context,t[0].modelState,t[0].viewState),this._setSecondaryStates(t.slice(1)))}_setSecondaryStates(t){const e=this.cursors.length-1,s=t.length;if(e<s){const t=s-e;for(let e=0;e<t;e++)this._addSecondaryCursor()}else if(e>s){const t=e-s;for(let e=0;e<t;e++)this._removeSecondaryCursor(this.cursors.length-2)}for(let o=0;o<s;o++)this.cursors[o+1].setState(this.context,t[o].modelState,t[o].viewState)}killSecondaryCursors(){this._setSecondaryStates([])}_addSecondaryCursor(){this.cursors.push(new Cursor(this.context)),this.lastAddedCursorIndex=this.cursors.length-1}getLastAddedCursorIndex(){return 1===this.cursors.length||0===this.lastAddedCursorIndex?0:this.lastAddedCursorIndex}_removeSecondaryCursor(t){this.lastAddedCursorIndex>=t+1&&this.lastAddedCursorIndex--,this.cursors[t+1].dispose(this.context),this.cursors.splice(t+1,1)}normalize(){if(1===this.cursors.length)return;const t=this.cursors.slice(0),e=[];for(let s=0,o=t.length;s<o;s++)e.push({index:s,selection:t[s].modelState.selection});e.sort(compareBy((t=>t.selection),Range.compareRangesUsingStarts));for(let s=0;s<e.length-1;s++){const o=e[s],r=e[s+1],i=o.selection,n=r.selection;if(!this.context.cursorConfig.multiCursorMergeOverlapping)continue;let c;if(c=n.isEmpty()||i.isEmpty()?n.getStartPosition().isBeforeOrEqual(i.getEndPosition()):n.getStartPosition().isBefore(i.getEndPosition()),c){const i=o.index<r.index?s:s+1,n=o.index<r.index?s+1:s,c=e[n].index,a=e[i].index,l=e[n].selection,u=e[i].selection;if(!l.equalsSelection(u)){const s=l.plusRange(u),o=l.selectionStartLineNumber===l.startLineNumber&&l.selectionStartColumn===l.startColumn,r=u.selectionStartLineNumber===u.startLineNumber&&u.selectionStartColumn===u.startColumn;let n,d;c===this.lastAddedCursorIndex?(n=o,this.lastAddedCursorIndex=a):n=r,d=n?new Selection(s.startLineNumber,s.startColumn,s.endLineNumber,s.endColumn):new Selection(s.endLineNumber,s.endColumn,s.startLineNumber,s.startColumn),e[i].selection=d;const m=CursorState.fromModelSelection(d);t[a].setState(this.context,m.modelState,m.viewState)}for(const t of e)t.index>c&&t.index--;t.splice(c,1),e.splice(n,1),this._removeSecondaryCursor(c-1),s--}}}}