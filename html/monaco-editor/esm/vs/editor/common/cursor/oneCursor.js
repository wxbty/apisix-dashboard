import{CursorState,SingleCursorState}from"./cursorCommon.js";import{Position}from"../core/position.js";import{Range}from"../core/range.js";import{Selection}from"../core/selection.js";export class Cursor{constructor(e){this._selTrackedRange=null,this._trackSelection=!0,this._setState(e,new SingleCursorState(new Range(1,1,1,1),0,new Position(1,1),0),new SingleCursorState(new Range(1,1,1,1),0,new Position(1,1),0))}dispose(e){this._removeTrackedRange(e)}startTrackingSelection(e){this._trackSelection=!0,this._updateTrackedRange(e)}stopTrackingSelection(e){this._trackSelection=!1,this._removeTrackedRange(e)}_updateTrackedRange(e){this._trackSelection&&(this._selTrackedRange=e.model._setTrackedRange(this._selTrackedRange,this.modelState.selection,0))}_removeTrackedRange(e){this._selTrackedRange=e.model._setTrackedRange(this._selTrackedRange,null,0)}asCursorState(){return new CursorState(this.modelState,this.viewState)}readSelectionFromMarkers(e){const t=e.model._getTrackedRange(this._selTrackedRange);return Selection.fromRange(t,this.modelState.selection.getDirection())}ensureValidState(e){this._setState(e,this.modelState,this.viewState)}setState(e,t,o){this._setState(e,t,o)}static _validatePositionWithCache(e,t,o,i){return t.equals(o)?i:e.normalizePosition(t,2)}static _validateViewState(e,t){const o=t.position,i=t.selectionStart.getStartPosition(),n=t.selectionStart.getEndPosition(),s=e.normalizePosition(o,2),r=this._validatePositionWithCache(e,i,o,s),a=this._validatePositionWithCache(e,n,i,r);return o.equals(s)&&i.equals(r)&&n.equals(a)?t:new SingleCursorState(Range.fromPositions(r,a),t.selectionStartLeftoverVisibleColumns+i.column-r.column,s,t.leftoverVisibleColumns+o.column-s.column)}_setState(e,t,o){if(o&&(o=Cursor._validateViewState(e.viewModel,o)),t){const o=e.model.validateRange(t.selectionStart),i=t.selectionStart.equalsRange(o)?t.selectionStartLeftoverVisibleColumns:0,n=e.model.validatePosition(t.position),s=t.position.equals(n)?t.leftoverVisibleColumns:0;t=new SingleCursorState(o,i,n,s)}else{if(!o)return;const i=e.model.validateRange(e.coordinatesConverter.convertViewRangeToModelRange(o.selectionStart)),n=e.model.validatePosition(e.coordinatesConverter.convertViewPositionToModelPosition(o.position));t=new SingleCursorState(i,o.selectionStartLeftoverVisibleColumns,n,o.leftoverVisibleColumns)}if(o){const i=e.coordinatesConverter.validateViewRange(o.selectionStart,t.selectionStart),n=e.coordinatesConverter.validateViewPosition(o.position,t.position);o=new SingleCursorState(i,t.selectionStartLeftoverVisibleColumns,n,t.leftoverVisibleColumns)}else{const i=e.coordinatesConverter.convertModelPositionToViewPosition(new Position(t.selectionStart.startLineNumber,t.selectionStart.startColumn)),n=e.coordinatesConverter.convertModelPositionToViewPosition(new Position(t.selectionStart.endLineNumber,t.selectionStart.endColumn)),s=new Range(i.lineNumber,i.column,n.lineNumber,n.column),r=e.coordinatesConverter.convertModelPositionToViewPosition(t.position);o=new SingleCursorState(s,t.selectionStartLeftoverVisibleColumns,r,t.leftoverVisibleColumns)}this.modelState=t,this.viewState=o,this._updateTrackedRange(e)}}