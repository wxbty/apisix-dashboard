var __decorate=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,a=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(a=(n<3?i(a):n>3?i(t,r,a):i(t,r))||a);return n>3&&a&&Object.defineProperty(t,r,a),a},__param=this&&this.__param||function(e,t){return function(r,o){t(r,o,e)}};import{createCancelablePromise,timeout}from"../../../../base/common/async.js";import{onUnexpectedError}from"../../../../base/common/errors.js";import{EditorState}from"../../editorState/browser/editorState.js";import{EditorAction,registerEditorAction,registerEditorContribution}from"../../../browser/editorExtensions.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import{ModelDecorationOptions}from"../../../common/model/textModel.js";import{IEditorWorkerService}from"../../../common/services/editorWorker.js";import{editorBracketMatchBorder}from"../../../common/core/editorColorRegistry.js";import*as nls from"../../../../nls.js";import{registerThemingParticipant}from"../../../../platform/theme/common/themeService.js";import{InPlaceReplaceCommand}from"./inPlaceReplaceCommand.js";let InPlaceReplaceController=class e{constructor(e,t){this.decorationIds=[],this.editor=e,this.editorWorkerService=t}static get(t){return t.getContribution(e.ID)}dispose(){}run(t,r){this.currentRequest&&this.currentRequest.cancel();const o=this.editor.getSelection(),i=this.editor.getModel();if(!i||!o)return;let n=o;if(n.startLineNumber!==n.endLineNumber)return;const a=new EditorState(this.editor,5),c=i.uri;return this.editorWorkerService.canNavigateValueSet(c)?(this.currentRequest=createCancelablePromise((e=>this.editorWorkerService.navigateValueSet(c,n,r))),this.currentRequest.then((r=>{if(!r||!r.range||!r.value)return;if(!a.validate(this.editor))return;let o=Range.lift(r.range),i=r.range,c=r.value.length-(n.endColumn-n.startColumn);i={startLineNumber:i.startLineNumber,startColumn:i.startColumn,endLineNumber:i.endLineNumber,endColumn:i.startColumn+r.value.length},c>1&&(n=new Selection(n.startLineNumber,n.startColumn,n.endLineNumber,n.endColumn+c-1));const l=new InPlaceReplaceCommand(o,n,r.value);this.editor.pushUndoStop(),this.editor.executeCommand(t,l),this.editor.pushUndoStop(),this.decorationIds=this.editor.deltaDecorations(this.decorationIds,[{range:i,options:e.DECORATION}]),this.decorationRemover&&this.decorationRemover.cancel(),this.decorationRemover=timeout(350),this.decorationRemover.then((()=>this.decorationIds=this.editor.deltaDecorations(this.decorationIds,[]))).catch(onUnexpectedError)})).catch(onUnexpectedError)):Promise.resolve(void 0)}};InPlaceReplaceController.ID="editor.contrib.inPlaceReplaceController",InPlaceReplaceController.DECORATION=ModelDecorationOptions.register({description:"in-place-replace",className:"valueSetReplacement"}),InPlaceReplaceController=__decorate([__param(1,IEditorWorkerService)],InPlaceReplaceController);class InPlaceReplaceUp extends EditorAction{constructor(){super({id:"editor.action.inPlaceReplace.up",label:nls.localize("InPlaceReplaceAction.previous.label","Replace with Previous Value"),alias:"Replace with Previous Value",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:3154,weight:100}})}run(e,t){const r=InPlaceReplaceController.get(t);return r?r.run(this.id,!0):Promise.resolve(void 0)}}class InPlaceReplaceDown extends EditorAction{constructor(){super({id:"editor.action.inPlaceReplace.down",label:nls.localize("InPlaceReplaceAction.next.label","Replace with Next Value"),alias:"Replace with Next Value",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:3156,weight:100}})}run(e,t){const r=InPlaceReplaceController.get(t);return r?r.run(this.id,!1):Promise.resolve(void 0)}}registerEditorContribution(InPlaceReplaceController.ID,InPlaceReplaceController),registerEditorAction(InPlaceReplaceUp),registerEditorAction(InPlaceReplaceDown),registerThemingParticipant(((e,t)=>{const r=e.getColor(editorBracketMatchBorder);r&&t.addRule(`.monaco-editor.vs .valueSetReplacement { outline: solid 2px ${r}; }`)}));