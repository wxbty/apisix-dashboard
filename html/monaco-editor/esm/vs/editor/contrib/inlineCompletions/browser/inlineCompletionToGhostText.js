import{LcsDiff}from"../../../../base/common/diff/diff.js";import*as strings from"../../../../base/common/strings.js";import{Range}from"../../../common/core/range.js";import{GhostText,GhostTextPart}from"./ghostText.js";export function normalizedInlineCompletionsEquals(t,e){return t===e||!(!t||!e)&&(t.range.equalsRange(e.range)&&t.text===e.text&&t.command===e.command)}export function inlineCompletionToGhostText(t,e,n,r,i=0){if(t.range.startLineNumber!==t.range.endLineNumber)return;const s=e.getLineContent(t.range.startLineNumber),o=strings.getLeadingWhitespace(s).length,a=t.range.startColumn-1<=o;if(a){const e=strings.getLeadingWhitespace(t.text).length,n=s.substring(t.range.startColumn-1,o),r=Range.fromPositions(t.range.getStartPosition().delta(0,n.length),t.range.getEndPosition()),i=t.text.startsWith(n)?t.text.substring(n.length):t.text.substring(e);t={range:r,text:i,command:t.command}}const g=e.getValueInRange(t.range),l=cachingDiff(g,t.text);if(!l)return;const u=t.range.startLineNumber,f=new Array;if("prefix"===n){const t=l.filter((t=>0===t.originalLength));if(t.length>1||1===t.length&&t[0].originalStart!==g.length)return}const m=t.text.length-i;for(const c of l){const e=t.range.startColumn+c.originalStart+c.originalLength;if("subwordSmart"===n&&r&&r.lineNumber===t.range.startLineNumber&&e<r.column)return;if(c.originalLength>0)return;if(0===c.modifiedLength)continue;const i=c.modifiedStart+c.modifiedLength,s=Math.max(c.modifiedStart,Math.min(i,m)),o=t.text.substring(c.modifiedStart,s),a=t.text.substring(s,Math.max(c.modifiedStart,i));if(o.length>0){const t=strings.splitLines(o);f.push(new GhostTextPart(e,t,!1))}if(a.length>0){const t=strings.splitLines(a);f.push(new GhostTextPart(e,t,!0))}}return new GhostText(u,f,0)}let lastRequest;function cachingDiff(t,e){if((null===lastRequest||void 0===lastRequest?void 0:lastRequest.originalValue)===t&&(null===lastRequest||void 0===lastRequest?void 0:lastRequest.newValue)===e)return null===lastRequest||void 0===lastRequest?void 0:lastRequest.changes;{const n=smartDiff(t,e);return lastRequest={originalValue:t,newValue:e,changes:n},n}}function smartDiff(t,e){if(t.length>5e3||e.length>5e3)return;function n(t){let e=0;for(let n=0,r=t.length;n<r;n++){const r=t.charCodeAt(n);r>e&&(e=r)}return e}const r=Math.max(n(t),n(e));function i(t){if(t<0)throw new Error("unexpected");return r+t+1}function s(t){let e=0,n=0;const r=new Int32Array(t.length);for(let s=0,o=t.length;s<o;s++){const o=100*n+e;"("===t[s]?(r[s]=i(2*o),e++):")"===t[s]?(r[s]=i(2*o+1),1===e&&n++,e=Math.max(e-1,0)):r[s]=t.charCodeAt(s)}return r}const o=s(t),a=s(e);return new LcsDiff({getElements:()=>o},{getElements:()=>a}).ComputeDiff(!1).changes}