import{EditorCommand,registerEditorCommand}from"../../../browser/editorExtensions.js";import{IContextKeyService,RawContextKey}from"../../../../platform/contextkey/common/contextkey.js";import{CancellationTokenSource}from"../../../../base/common/cancellation.js";import{LinkedList}from"../../../../base/common/linkedList.js";import{createDecorator}from"../../../../platform/instantiation/common/instantiation.js";import{registerSingleton}from"../../../../platform/instantiation/common/extensions.js";import{localize}from"../../../../nls.js";const IEditorCancellationTokens=createDecorator("IEditorCancelService"),ctxCancellableOperation=new RawContextKey("cancellableOperation",!1,localize("cancellableOperation","Whether the editor runs a cancellable operation, e.g. like 'Peek References'"));registerSingleton(IEditorCancellationTokens,class{constructor(){this._tokens=new WeakMap}add(e,t){let o,n=this._tokens.get(e);return n||(n=e.invokeWithinContext((e=>{const t=ctxCancellableOperation.bindTo(e.get(IContextKeyService)),o=new LinkedList;return{key:t,tokens:o}})),this._tokens.set(e,n)),n.key.set(!0),o=n.tokens.push(t),()=>{o&&(o(),n.key.set(!n.tokens.isEmpty()),o=void 0)}}cancel(e){const t=this._tokens.get(e);if(!t)return;const o=t.tokens.pop();o&&(o.cancel(),t.key.set(!t.tokens.isEmpty()))}},!0);export class EditorKeybindingCancellationTokenSource extends CancellationTokenSource{constructor(e,t){super(t),this.editor=e,this._unregister=e.invokeWithinContext((t=>t.get(IEditorCancellationTokens).add(e,this)))}dispose(){this._unregister(),super.dispose()}}registerEditorCommand(new class extends EditorCommand{constructor(){super({id:"editor.cancelOperation",kbOpts:{weight:100,primary:9},precondition:ctxCancellableOperation})}runEditorCommand(e,t){e.get(IEditorCancellationTokens).cancel(t)}});