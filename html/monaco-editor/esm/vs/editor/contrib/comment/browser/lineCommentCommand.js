import*as strings from"../../../../base/common/strings.js";import{EditOperation}from"../../../common/core/editOperation.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{LanguageConfigurationRegistry}from"../../../common/languages/languageConfigurationRegistry.js";import{BlockCommentCommand}from"./blockCommentCommand.js";export class LineCommentCommand{constructor(e,t,n,o,i,m,r){this.languageConfigurationService=e,this._selection=t,this._tabSize=n,this._type=o,this._insertSpace=i,this._selectionId=null,this._deltaColumn=0,this._moveEndPositionDown=!1,this._ignoreEmptyLines=m,this._ignoreFirstLine=r||!1}static _gatherPreflightCommentStrings(e,t,n,o){e.tokenizeIfCheap(t);const i=e.getLanguageIdAtPosition(t,1),m=o.getLanguageConfiguration(i).comments,r=m?m.lineCommentToken:null;if(!r)return null;let s=[];for(let a=0,l=n-t+1;a<l;a++)s[a]={ignore:!1,commentStr:r,commentStrOffset:0,commentStrLength:r.length};return s}static _analyzeLines(e,t,n,o,i,m,r,s){let a,l=!0;a=0===e||1!==e;for(let c=0,g=o.length;c<g;c++){const s=o[c],g=i+c;if(g===i&&r){s.ignore=!0;continue}const u=n.getLineContent(g),C=strings.firstNonWhitespaceIndex(u);if(-1!==C){if(l=!1,s.ignore=!1,s.commentStrOffset=C,a&&!BlockCommentCommand._haystackHasNeedleAtOffset(u,s.commentStr,C)&&(0===e?a=!1:1===e||(s.ignore=!0)),a&&t){const e=C+s.commentStrLength;e<u.length&&32===u.charCodeAt(e)&&(s.commentStrLength+=1)}}else s.ignore=m,s.commentStrOffset=u.length}if(0===e&&l){a=!1;for(let e=0,t=o.length;e<t;e++)o[e].ignore=!1}return{supported:!0,shouldRemoveComments:a,lines:o}}static _gatherPreflightData(e,t,n,o,i,m,r,s){const a=LineCommentCommand._gatherPreflightCommentStrings(n,o,i,s);return null===a?{supported:!1}:LineCommentCommand._analyzeLines(e,t,n,a,o,m,r,s)}_executeLineComments(e,t,n,o){let i;n.shouldRemoveComments?i=LineCommentCommand._createRemoveLineCommentsOperations(n.lines,o.startLineNumber):(LineCommentCommand._normalizeInsertionPoint(e,n.lines,o.startLineNumber,this._tabSize),i=this._createAddLineCommentsOperations(n.lines,o.startLineNumber));const m=new Position(o.positionLineNumber,o.positionColumn);for(let r=0,s=i.length;r<s;r++)if(t.addEditOperation(i[r].range,i[r].text),Range.isEmpty(i[r].range)&&Range.getStartPosition(i[r].range).equals(m)){const t=e.getLineContent(m.lineNumber);t.length+1===m.column&&(this._deltaColumn=(i[r].text||"").length)}this._selectionId=t.trackSelection(o)}_attemptRemoveBlockComment(e,t,n,o){let i=t.startLineNumber,m=t.endLineNumber,r=o.length+Math.max(e.getLineFirstNonWhitespaceColumn(t.startLineNumber),t.startColumn),s=e.getLineContent(i).lastIndexOf(n,r-1),a=e.getLineContent(m).indexOf(o,t.endColumn-1-n.length);return-1!==s&&-1===a&&(a=e.getLineContent(i).indexOf(o,s+n.length),m=i),-1===s&&-1!==a&&(s=e.getLineContent(m).lastIndexOf(n,a),i=m),!t.isEmpty()||-1!==s&&-1!==a||(s=e.getLineContent(i).indexOf(n),-1!==s&&(a=e.getLineContent(i).indexOf(o,s+n.length))),-1!==s&&32===e.getLineContent(i).charCodeAt(s+n.length)&&(n+=" "),-1!==a&&32===e.getLineContent(m).charCodeAt(a-1)&&(o=" "+o,a-=1),-1!==s&&-1!==a?BlockCommentCommand._createRemoveBlockCommentOperations(new Range(i,s+n.length+1,m,a+1),n,o):null}_executeBlockComment(e,t,n){e.tokenizeIfCheap(n.startLineNumber);let o=e.getLanguageIdAtPosition(n.startLineNumber,1),i=LanguageConfigurationRegistry.getComments(o);if(!i||!i.blockCommentStartToken||!i.blockCommentEndToken)return;const m=i.blockCommentStartToken,r=i.blockCommentEndToken;let s=this._attemptRemoveBlockComment(e,n,m,r);if(!s){if(n.isEmpty()){const t=e.getLineContent(n.startLineNumber);let o=strings.firstNonWhitespaceIndex(t);-1===o&&(o=t.length),s=BlockCommentCommand._createAddBlockCommentOperations(new Range(n.startLineNumber,o+1,n.startLineNumber,t.length+1),m,r,this._insertSpace)}else s=BlockCommentCommand._createAddBlockCommentOperations(new Range(n.startLineNumber,e.getLineFirstNonWhitespaceColumn(n.startLineNumber),n.endLineNumber,e.getLineMaxColumn(n.endLineNumber)),m,r,this._insertSpace);1===s.length&&(this._deltaColumn=m.length+1)}this._selectionId=t.trackSelection(n);for(const a of s)t.addEditOperation(a.range,a.text)}getEditOperations(e,t){let n=this._selection;if(this._moveEndPositionDown=!1,n.startLineNumber===n.endLineNumber&&this._ignoreFirstLine)return t.addEditOperation(new Range(n.startLineNumber,e.getLineMaxColumn(n.startLineNumber),n.startLineNumber+1,1),n.startLineNumber===e.getLineCount()?"":"\n"),void(this._selectionId=t.trackSelection(n));n.startLineNumber<n.endLineNumber&&1===n.endColumn&&(this._moveEndPositionDown=!0,n=n.setEndPosition(n.endLineNumber-1,e.getLineMaxColumn(n.endLineNumber-1)));const o=LineCommentCommand._gatherPreflightData(this._type,this._insertSpace,e,n.startLineNumber,n.endLineNumber,this._ignoreEmptyLines,this._ignoreFirstLine,this.languageConfigurationService);return o.supported?this._executeLineComments(e,t,o,n):this._executeBlockComment(e,t,n)}computeCursorState(e,t){let n=t.getTrackedSelection(this._selectionId);return this._moveEndPositionDown&&(n=n.setEndPosition(n.endLineNumber+1,1)),new Selection(n.selectionStartLineNumber,n.selectionStartColumn+this._deltaColumn,n.positionLineNumber,n.positionColumn+this._deltaColumn)}static _createRemoveLineCommentsOperations(e,t){let n=[];for(let o=0,i=e.length;o<i;o++){const i=e[o];i.ignore||n.push(EditOperation.delete(new Range(t+o,i.commentStrOffset+1,t+o,i.commentStrOffset+i.commentStrLength+1)))}return n}_createAddLineCommentsOperations(e,t){let n=[];const o=this._insertSpace?" ":"";for(let i=0,m=e.length;i<m;i++){const m=e[i];m.ignore||n.push(EditOperation.insert(new Position(t+i,m.commentStrOffset+1),m.commentStr+o))}return n}static nextVisibleColumn(e,t,n,o){return n?e+(t-e%t):e+o}static _normalizeInsertionPoint(e,t,n,o){let i,m,r=1073741824;for(let s=0,a=t.length;s<a;s++){if(t[s].ignore)continue;const i=e.getLineContent(n+s);let m=0;for(let e=0,n=t[s].commentStrOffset;m<r&&e<n;e++)m=LineCommentCommand.nextVisibleColumn(m,o,9===i.charCodeAt(e),1);m<r&&(r=m)}r=Math.floor(r/o)*o;for(let s=0,a=t.length;s<a;s++){if(t[s].ignore)continue;const a=e.getLineContent(n+s);let l=0;for(i=0,m=t[s].commentStrOffset;l<r&&i<m;i++)l=LineCommentCommand.nextVisibleColumn(l,o,9===a.charCodeAt(i),1);t[s].commentStrOffset=l>r?i-1:i}}}