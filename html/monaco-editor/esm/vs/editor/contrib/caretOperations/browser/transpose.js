import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{ReplaceCommand}from"../../../common/commands/replaceCommand.js";import{MoveOperations}from"../../../common/cursor/cursorMoveOperations.js";import{Range}from"../../../common/core/range.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import*as nls from"../../../../nls.js";class TransposeLettersAction extends EditorAction{constructor(){super({id:"editor.action.transposeLetters",label:nls.localize("transposeLetters.label","Transpose Letters"),alias:"Transpose Letters",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:306},weight:100}})}run(o,e){if(!e.hasModel())return;let t=e.getModel(),n=[],s=e.getSelections();for(let r of s){if(!r.isEmpty())continue;let o=r.startLineNumber,e=r.startColumn,s=t.getLineMaxColumn(o);if(1===o&&(1===e||2===e&&2===s))continue;let i=e===s?r.getPosition():MoveOperations.rightPosition(t,r.getPosition().lineNumber,r.getPosition().column),a=MoveOperations.leftPosition(t,i),m=MoveOperations.leftPosition(t,a),p=t.getValueInRange(Range.fromPositions(m,a)),l=t.getValueInRange(Range.fromPositions(a,i)),c=Range.fromPositions(m,i);n.push(new ReplaceCommand(c,l+p))}n.length>0&&(e.pushUndoStop(),e.executeCommands(this.id,n),e.pushUndoStop())}}registerEditorAction(TransposeLettersAction);