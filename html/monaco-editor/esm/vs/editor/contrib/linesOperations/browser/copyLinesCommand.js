import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";export class CopyLinesCommand{constructor(e,n,t){this._selection=e,this._isCopyingDown=n,this._noop=t||!1,this._selectionDirection=0,this._selectionId=null,this._startLineNumberDelta=0,this._endLineNumberDelta=0}getEditOperations(e,n){let t=this._selection;this._startLineNumberDelta=0,this._endLineNumberDelta=0,t.startLineNumber<t.endLineNumber&&1===t.endColumn&&(this._endLineNumberDelta=1,t=t.setEndPosition(t.endLineNumber-1,e.getLineMaxColumn(t.endLineNumber-1)));let i=[];for(let o=t.startLineNumber;o<=t.endLineNumber;o++)i.push(e.getLineContent(o));const r=i.join("\n");""===r&&this._isCopyingDown&&(this._startLineNumberDelta++,this._endLineNumberDelta++),this._noop?n.addEditOperation(new Range(t.endLineNumber,e.getLineMaxColumn(t.endLineNumber),t.endLineNumber+1,1),t.endLineNumber===e.getLineCount()?"":"\n"):this._isCopyingDown?n.addEditOperation(new Range(t.startLineNumber,1,t.startLineNumber,1),r+"\n"):n.addEditOperation(new Range(t.endLineNumber,e.getLineMaxColumn(t.endLineNumber),t.endLineNumber,e.getLineMaxColumn(t.endLineNumber)),"\n"+r),this._selectionId=n.trackSelection(t),this._selectionDirection=this._selection.getDirection()}computeCursorState(e,n){let t=n.getTrackedSelection(this._selectionId);if(0!==this._startLineNumberDelta||0!==this._endLineNumberDelta){let e=t.startLineNumber,n=t.startColumn,i=t.endLineNumber,r=t.endColumn;0!==this._startLineNumberDelta&&(e+=this._startLineNumberDelta,n=1),0!==this._endLineNumberDelta&&(i+=this._endLineNumberDelta,r=1),t=Selection.createWithDirection(e,n,i,r,this._selectionDirection)}return t}}