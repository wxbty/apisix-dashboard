import{KeyChord}from"../../../../base/common/keyCodes.js";import{CoreEditingCommands}from"../../../browser/controller/coreCommands.js";import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{ReplaceCommand,ReplaceCommandThatPreservesSelection,ReplaceCommandThatSelectsText}from"../../../common/commands/replaceCommand.js";import{TrimTrailingWhitespaceCommand}from"../../../common/commands/trimTrailingWhitespaceCommand.js";import{TypeOperations}from"../../../common/cursor/cursorTypeOperations.js";import{EditOperation}from"../../../common/core/editOperation.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import{CopyLinesCommand}from"./copyLinesCommand.js";import{MoveLinesCommand}from"./moveLinesCommand.js";import{SortLinesCommand}from"./sortLinesCommand.js";import*as nls from"../../../../nls.js";import{MenuId}from"../../../../platform/actions/common/actions.js";class AbstractCopyLinesAction extends EditorAction{constructor(e,t){super(t),this.down=e}run(e,t){if(!t.hasModel())return;const n=t.getSelections().map(((e,t)=>({selection:e,index:t,ignore:!1})));n.sort(((e,t)=>Range.compareRangesUsingStarts(e.selection,t.selection)));let o=n[0];for(let r=1;r<n.length;r++){const e=n[r];o.selection.endLineNumber===e.selection.startLineNumber&&(o.index<e.index?e.ignore=!0:(o.ignore=!0,o=e))}const i=[];for(const r of n)i.push(new CopyLinesCommand(r.selection,this.down,r.ignore));t.pushUndoStop(),t.executeCommands(this.id,i),t.pushUndoStop()}}class CopyLinesUpAction extends AbstractCopyLinesAction{constructor(){super(!1,{id:"editor.action.copyLinesUpAction",label:nls.localize("lines.copyUp","Copy Line Up"),alias:"Copy Line Up",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1552,linux:{primary:3600},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miCopyLinesUp",comment:["&& denotes a mnemonic"]},"&&Copy Line Up"),order:1}})}}class CopyLinesDownAction extends AbstractCopyLinesAction{constructor(){super(!0,{id:"editor.action.copyLinesDownAction",label:nls.localize("lines.copyDown","Copy Line Down"),alias:"Copy Line Down",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1554,linux:{primary:3602},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miCopyLinesDown",comment:["&& denotes a mnemonic"]},"Co&&py Line Down"),order:2}})}}export class DuplicateSelectionAction extends EditorAction{constructor(){super({id:"editor.action.duplicateSelection",label:nls.localize("duplicateSelection","Duplicate Selection"),alias:"Duplicate Selection",precondition:EditorContextKeys.writable,menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miDuplicateSelection",comment:["&& denotes a mnemonic"]},"&&Duplicate Selection"),order:5}})}run(e,t,n){if(!t.hasModel())return;const o=[],i=t.getSelections(),r=t.getModel();for(const s of i)if(s.isEmpty())o.push(new CopyLinesCommand(s,!0));else{const e=new Selection(s.endLineNumber,s.endColumn,s.endLineNumber,s.endColumn);o.push(new ReplaceCommandThatSelectsText(e,r.getValueInRange(s)))}t.pushUndoStop(),t.executeCommands(this.id,o),t.pushUndoStop()}}class AbstractMoveLinesAction extends EditorAction{constructor(e,t){super(t),this.down=e}run(e,t){let n=[],o=t.getSelections()||[];const i=t.getOption(9);for(const r of o)n.push(new MoveLinesCommand(r,this.down,i));t.pushUndoStop(),t.executeCommands(this.id,n),t.pushUndoStop()}}class MoveLinesUpAction extends AbstractMoveLinesAction{constructor(){super(!1,{id:"editor.action.moveLinesUpAction",label:nls.localize("lines.moveUp","Move Line Up"),alias:"Move Line Up",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:528,linux:{primary:528},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miMoveLinesUp",comment:["&& denotes a mnemonic"]},"Mo&&ve Line Up"),order:3}})}}class MoveLinesDownAction extends AbstractMoveLinesAction{constructor(){super(!0,{id:"editor.action.moveLinesDownAction",label:nls.localize("lines.moveDown","Move Line Down"),alias:"Move Line Down",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:530,linux:{primary:530},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miMoveLinesDown",comment:["&& denotes a mnemonic"]},"Move &&Line Down"),order:4}})}}export class AbstractSortLinesAction extends EditorAction{constructor(e,t){super(t),this.descending=e}run(e,t){const n=t.getSelections()||[];for(const i of n)if(!SortLinesCommand.canRun(t.getModel(),i,this.descending))return;let o=[];for(let i=0,r=n.length;i<r;i++)o[i]=new SortLinesCommand(n[i],this.descending);t.pushUndoStop(),t.executeCommands(this.id,o),t.pushUndoStop()}}export class SortLinesAscendingAction extends AbstractSortLinesAction{constructor(){super(!1,{id:"editor.action.sortLinesAscending",label:nls.localize("lines.sortAscending","Sort Lines Ascending"),alias:"Sort Lines Ascending",precondition:EditorContextKeys.writable})}}export class SortLinesDescendingAction extends AbstractSortLinesAction{constructor(){super(!0,{id:"editor.action.sortLinesDescending",label:nls.localize("lines.sortDescending","Sort Lines Descending"),alias:"Sort Lines Descending",precondition:EditorContextKeys.writable})}}export class DeleteDuplicateLinesAction extends EditorAction{constructor(){super({id:"editor.action.removeDuplicateLines",label:nls.localize("lines.deleteDuplicates","Delete Duplicate Lines"),alias:"Delete Duplicate Lines",precondition:EditorContextKeys.writable})}run(e,t){if(!t.hasModel())return;let n=t.getModel();if(1===n.getLineCount()&&1===n.getLineMaxColumn(1))return;let o=[],i=[],r=0;for(let s of t.getSelections()){let e=new Set,t=[];for(let o=s.startLineNumber;o<=s.endLineNumber;o++){let i=n.getLineContent(o);e.has(i)||(t.push(i),e.add(i))}let l=new Selection(s.startLineNumber,1,s.endLineNumber,n.getLineMaxColumn(s.endLineNumber)),a=s.startLineNumber-r,c=new Selection(a,1,a+t.length-1,t[t.length-1].length);o.push(EditOperation.replace(l,t.join("\n"))),i.push(c),r+=s.endLineNumber-s.startLineNumber+1-t.length}t.pushUndoStop(),t.executeEdits(this.id,o,i),t.pushUndoStop()}}export class TrimTrailingWhitespaceAction extends EditorAction{constructor(){super({id:TrimTrailingWhitespaceAction.ID,label:nls.localize("lines.trimTrailingWhitespace","Trim Trailing Whitespace"),alias:"Trim Trailing Whitespace",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2102),weight:100}})}run(e,t,n){let o=[];"auto-save"===n.reason&&(o=(t.getSelections()||[]).map((e=>new Position(e.positionLineNumber,e.positionColumn))));let i=t.getSelection();if(null===i)return;let r=new TrimTrailingWhitespaceCommand(i,o);t.pushUndoStop(),t.executeCommands(this.id,[r]),t.pushUndoStop()}}TrimTrailingWhitespaceAction.ID="editor.action.trimTrailingWhitespace";export class DeleteLinesAction extends EditorAction{constructor(){super({id:"editor.action.deleteLines",label:nls.localize("lines.delete","Delete Line"),alias:"Delete Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:3113,weight:100}})}run(e,t){if(!t.hasModel())return;let n=this._getLinesToRemove(t),o=t.getModel();if(1===o.getLineCount()&&1===o.getLineMaxColumn(1))return;let i=0,r=[],s=[];for(let l=0,a=n.length;l<a;l++){const e=n[l];let t=e.startLineNumber,a=e.endLineNumber,c=1,u=o.getLineMaxColumn(a);a<o.getLineCount()?(a+=1,u=1):t>1&&(t-=1,c=o.getLineMaxColumn(t)),r.push(EditOperation.replace(new Selection(t,c,a,u),"")),s.push(new Selection(t-i,e.positionColumn,t-i,e.positionColumn)),i+=e.endLineNumber-e.startLineNumber+1}t.pushUndoStop(),t.executeEdits(this.id,r,s),t.pushUndoStop()}_getLinesToRemove(e){let t=e.getSelections().map((e=>{let t=e.endLineNumber;return e.startLineNumber<e.endLineNumber&&1===e.endColumn&&(t-=1),{startLineNumber:e.startLineNumber,selectionStartColumn:e.selectionStartColumn,endLineNumber:t,positionColumn:e.positionColumn}}));t.sort(((e,t)=>e.startLineNumber===t.startLineNumber?e.endLineNumber-t.endLineNumber:e.startLineNumber-t.startLineNumber));let n=[],o=t[0];for(let i=1;i<t.length;i++)o.endLineNumber+1>=t[i].startLineNumber?o.endLineNumber=t[i].endLineNumber:(n.push(o),o=t[i]);return n.push(o),n}}export class IndentLinesAction extends EditorAction{constructor(){super({id:"editor.action.indentLines",label:nls.localize("lines.indent","Indent Line"),alias:"Indent Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2137,weight:100}})}run(e,t){const n=t._getViewModel();n&&(t.pushUndoStop(),t.executeCommands(this.id,TypeOperations.indent(n.cursorConfig,t.getModel(),t.getSelections())),t.pushUndoStop())}}class OutdentLinesAction extends EditorAction{constructor(){super({id:"editor.action.outdentLines",label:nls.localize("lines.outdent","Outdent Line"),alias:"Outdent Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2135,weight:100}})}run(e,t){CoreEditingCommands.Outdent.runEditorCommand(e,t,null)}}export class InsertLineBeforeAction extends EditorAction{constructor(){super({id:"editor.action.insertLineBefore",label:nls.localize("lines.insertBefore","Insert Line Above"),alias:"Insert Line Above",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:3075,weight:100}})}run(e,t){const n=t._getViewModel();n&&(t.pushUndoStop(),t.executeCommands(this.id,TypeOperations.lineInsertBefore(n.cursorConfig,t.getModel(),t.getSelections())))}}export class InsertLineAfterAction extends EditorAction{constructor(){super({id:"editor.action.insertLineAfter",label:nls.localize("lines.insertAfter","Insert Line Below"),alias:"Insert Line Below",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2051,weight:100}})}run(e,t){const n=t._getViewModel();n&&(t.pushUndoStop(),t.executeCommands(this.id,TypeOperations.lineInsertAfter(n.cursorConfig,t.getModel(),t.getSelections())))}}export class AbstractDeleteAllToBoundaryAction extends EditorAction{run(e,t){if(!t.hasModel())return;const n=t.getSelection();let o=this._getRangesToDelete(t),i=[];for(let l=0,a=o.length-1;l<a;l++){let e=o[l],t=o[l+1];null===Range.intersectRanges(e,t)?i.push(e):o[l+1]=Range.plusRange(e,t)}i.push(o[o.length-1]);let r=this._getEndCursorState(n,i),s=i.map((e=>EditOperation.replace(e,"")));t.pushUndoStop(),t.executeEdits(this.id,s,r),t.pushUndoStop()}}export class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction{constructor(){super({id:"deleteAllLeft",label:nls.localize("lines.deleteAllLeft","Delete All Left"),alias:"Delete All Left",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:2049},weight:100}})}_getEndCursorState(e,t){let n=null,o=[],i=0;return t.forEach((t=>{let r;if(1===t.endColumn&&i>0){let e=t.startLineNumber-i;r=new Selection(e,t.startColumn,e,t.startColumn)}else r=new Selection(t.startLineNumber,t.startColumn,t.startLineNumber,t.startColumn);i+=t.endLineNumber-t.startLineNumber,t.intersectRanges(e)?n=r:o.push(r)})),n&&o.unshift(n),o}_getRangesToDelete(e){let t=e.getSelections();if(null===t)return[];let n=t,o=e.getModel();return null===o?[]:(n.sort(Range.compareRangesUsingStarts),n=n.map((e=>{if(e.isEmpty()){if(1===e.startColumn){let t=Math.max(1,e.startLineNumber-1),n=1===e.startLineNumber?1:o.getLineContent(t).length+1;return new Range(t,n,e.startLineNumber,1)}return new Range(e.startLineNumber,1,e.startLineNumber,e.startColumn)}return new Range(e.startLineNumber,1,e.endLineNumber,e.endColumn)})),n)}}export class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction{constructor(){super({id:"deleteAllRight",label:nls.localize("lines.deleteAllRight","Delete All Right"),alias:"Delete All Right",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:297,secondary:[2068]},weight:100}})}_getEndCursorState(e,t){let n=null,o=[];for(let i=0,r=t.length,s=0;i<r;i++){let r=t[i],l=new Selection(r.startLineNumber-s,r.startColumn,r.startLineNumber-s,r.startColumn);r.intersectRanges(e)?n=l:o.push(l)}return n&&o.unshift(n),o}_getRangesToDelete(e){let t=e.getModel();if(null===t)return[];let n=e.getSelections();if(null===n)return[];let o=n.map((e=>{if(e.isEmpty()){const n=t.getLineMaxColumn(e.startLineNumber);return e.startColumn===n?new Range(e.startLineNumber,e.startColumn,e.startLineNumber+1,1):new Range(e.startLineNumber,e.startColumn,e.startLineNumber,n)}return e}));return o.sort(Range.compareRangesUsingStarts),o}}export class JoinLinesAction extends EditorAction{constructor(){super({id:"editor.action.joinLines",label:nls.localize("lines.joinLines","Join Lines"),alias:"Join Lines",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:0,mac:{primary:296},weight:100}})}run(e,t){let n=t.getSelections();if(null===n)return;let o=t.getSelection();if(null===o)return;n.sort(Range.compareRangesUsingStarts);let i=[],r=n.reduce(((e,t)=>e.isEmpty()?e.endLineNumber===t.startLineNumber?(o.equalsSelection(e)&&(o=t),t):t.startLineNumber>e.endLineNumber+1?(i.push(e),t):new Selection(e.startLineNumber,e.startColumn,t.endLineNumber,t.endColumn):t.startLineNumber>e.endLineNumber?(i.push(e),t):new Selection(e.startLineNumber,e.startColumn,t.endLineNumber,t.endColumn)));i.push(r);let s=t.getModel();if(null===s)return;let l=[],a=[],c=o,u=0;for(let d=0,p=i.length;d<p;d++){let e,t,n=i[d],r=n.startLineNumber,p=1,m=0,g=s.getLineContent(n.endLineNumber).length-n.endColumn;if(n.isEmpty()||n.startLineNumber===n.endLineNumber){let o=n.getStartPosition();o.lineNumber<s.getLineCount()?(e=r+1,t=s.getLineMaxColumn(e)):(e=o.lineNumber,t=s.getLineMaxColumn(o.lineNumber))}else e=n.endLineNumber,t=s.getLineMaxColumn(e);let L=s.getLineContent(r);for(let o=r+1;o<=e;o++){let e=s.getLineContent(o),t=s.getLineFirstNonWhitespaceColumn(o);if(t>=1){let n=!0;""===L&&(n=!1),!n||" "!==L.charAt(L.length-1)&&"\t"!==L.charAt(L.length-1)||(n=!1,L=L.replace(/[\s\uFEFF\xA0]+$/g," "));let o=e.substr(t-1);L+=(n?" ":"")+o,m=n?o.length+1:o.length}else m=0}let b=new Range(r,p,e,t);if(!b.isEmpty()){let e;n.isEmpty()?(l.push(EditOperation.replace(b,L)),e=new Selection(b.startLineNumber-u,L.length-m+1,r-u,L.length-m+1)):n.startLineNumber===n.endLineNumber?(l.push(EditOperation.replace(b,L)),e=new Selection(n.startLineNumber-u,n.startColumn,n.endLineNumber-u,n.endColumn)):(l.push(EditOperation.replace(b,L)),e=new Selection(n.startLineNumber-u,n.startColumn,n.startLineNumber-u,L.length-g)),null!==Range.intersectRanges(b,o)?c=e:a.push(e)}u+=b.endLineNumber-b.startLineNumber}a.unshift(c),t.pushUndoStop(),t.executeEdits(this.id,l,a),t.pushUndoStop()}}export class TransposeAction extends EditorAction{constructor(){super({id:"editor.action.transpose",label:nls.localize("editor.transpose","Transpose characters around the cursor"),alias:"Transpose characters around the cursor",precondition:EditorContextKeys.writable})}run(e,t){let n=t.getSelections();if(null===n)return;let o=t.getModel();if(null===o)return;let i=[];for(let r=0,s=n.length;r<s;r++){let e=n[r];if(!e.isEmpty())continue;let t=e.getStartPosition(),s=o.getLineMaxColumn(t.lineNumber);if(t.column>=s){if(t.lineNumber===o.getLineCount())continue;let e=new Range(t.lineNumber,Math.max(1,t.column-1),t.lineNumber+1,1),n=o.getValueInRange(e).split("").reverse().join("");i.push(new ReplaceCommand(new Selection(t.lineNumber,Math.max(1,t.column-1),t.lineNumber+1,1),n))}else{let e=new Range(t.lineNumber,Math.max(1,t.column-1),t.lineNumber,t.column+1),n=o.getValueInRange(e).split("").reverse().join("");i.push(new ReplaceCommandThatPreservesSelection(e,n,new Selection(t.lineNumber,t.column+1,t.lineNumber,t.column+1)))}}t.pushUndoStop(),t.executeCommands(this.id,i),t.pushUndoStop()}}export class AbstractCaseAction extends EditorAction{run(e,t){const n=t.getSelections();if(null===n)return;const o=t.getModel();if(null===o)return;const i=t.getOption(117),r=[];for(const s of n)if(s.isEmpty()){const e=s.getStartPosition(),n=t.getConfiguredWordAtPosition(e);if(!n)continue;const l=new Range(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn),a=o.getValueInRange(l);r.push(EditOperation.replace(l,this._modifyText(a,i)))}else{const e=o.getValueInRange(s);r.push(EditOperation.replace(s,this._modifyText(e,i)))}t.pushUndoStop(),t.executeEdits(this.id,r),t.pushUndoStop()}}export class UpperCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToUppercase",label:nls.localize("editor.transformToUppercase","Transform to Uppercase"),alias:"Transform to Uppercase",precondition:EditorContextKeys.writable})}_modifyText(e,t){return e.toLocaleUpperCase()}}export class LowerCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToLowercase",label:nls.localize("editor.transformToLowercase","Transform to Lowercase"),alias:"Transform to Lowercase",precondition:EditorContextKeys.writable})}_modifyText(e,t){return e.toLocaleLowerCase()}}class BackwardsCompatibleRegExp{constructor(e,t){this._pattern=e,this._flags=t,this._actual=null,this._evaluated=!1}get(){if(!this._evaluated){this._evaluated=!0;try{this._actual=new RegExp(this._pattern,this._flags)}catch(e){}}return this._actual}isSupported(){return null!==this.get()}}export class TitleCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToTitlecase",label:nls.localize("editor.transformToTitlecase","Transform to Title Case"),alias:"Transform to Title Case",precondition:EditorContextKeys.writable})}_modifyText(e,t){const n=TitleCaseAction.titleBoundary.get();return n?e.toLocaleLowerCase().replace(n,(e=>e.toLocaleUpperCase())):e}}TitleCaseAction.titleBoundary=new BackwardsCompatibleRegExp("(^|[^\\p{L}\\p{N}']|((^|\\P{L})'))\\p{L}","gmu");export class SnakeCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToSnakecase",label:nls.localize("editor.transformToSnakecase","Transform to Snake Case"),alias:"Transform to Snake Case",precondition:EditorContextKeys.writable})}_modifyText(e,t){const n=SnakeCaseAction.caseBoundary.get(),o=SnakeCaseAction.singleLetters.get();return n&&o?e.replace(n,"$1_$2").replace(o,"$1_$2$3").toLocaleLowerCase():e}}SnakeCaseAction.caseBoundary=new BackwardsCompatibleRegExp("(\\p{Ll})(\\p{Lu})","gmu"),SnakeCaseAction.singleLetters=new BackwardsCompatibleRegExp("(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})","gmu"),registerEditorAction(CopyLinesUpAction),registerEditorAction(CopyLinesDownAction),registerEditorAction(DuplicateSelectionAction),registerEditorAction(MoveLinesUpAction),registerEditorAction(MoveLinesDownAction),registerEditorAction(SortLinesAscendingAction),registerEditorAction(SortLinesDescendingAction),registerEditorAction(DeleteDuplicateLinesAction),registerEditorAction(TrimTrailingWhitespaceAction),registerEditorAction(DeleteLinesAction),registerEditorAction(IndentLinesAction),registerEditorAction(OutdentLinesAction),registerEditorAction(InsertLineBeforeAction),registerEditorAction(InsertLineAfterAction),registerEditorAction(DeleteAllLeftAction),registerEditorAction(DeleteAllRightAction),registerEditorAction(JoinLinesAction),registerEditorAction(TransposeAction),registerEditorAction(UpperCaseAction),registerEditorAction(LowerCaseAction),SnakeCaseAction.caseBoundary.isSupported()&&SnakeCaseAction.singleLetters.isSupported()&&registerEditorAction(SnakeCaseAction),TitleCaseAction.titleBoundary.isSupported()&&registerEditorAction(TitleCaseAction);