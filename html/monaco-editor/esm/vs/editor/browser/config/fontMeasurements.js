import*as browser from"../../../base/browser/browser.js";import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{CharWidthRequest,readCharWidths}from"./charWidthReader.js";import{EditorFontLigatures}from"../../common/config/editorOptions.js";import{FontInfo}from"../../common/config/fontInfo.js";class FontMeasurementsImpl extends Disposable{constructor(){super(),this._onDidChange=this._register(new Emitter),this.onDidChange=this._onDidChange.event,this._cache=new FontMeasurementsCache,this._evictUntrustedReadingsTimeout=-1}dispose(){-1!==this._evictUntrustedReadingsTimeout&&(window.clearTimeout(this._evictUntrustedReadingsTimeout),this._evictUntrustedReadingsTimeout=-1),super.dispose()}clearAllFontInfos(){this._cache=new FontMeasurementsCache,this._onDidChange.fire()}_writeToCache(t,e){this._cache.put(t,e),e.isTrusted||-1!==this._evictUntrustedReadingsTimeout||(this._evictUntrustedReadingsTimeout=window.setTimeout((()=>{this._evictUntrustedReadingsTimeout=-1,this._evictUntrustedReadings()}),5e3))}_evictUntrustedReadings(){const t=this._cache.getValues();let e=!1;for(const i of t)i.isTrusted||(e=!0,this._cache.remove(i));e&&this._onDidChange.fire()}readFontInfo(t){if(!this._cache.has(t)){let e=this._actualReadFontInfo(t);(e.typicalHalfwidthCharacterWidth<=2||e.typicalFullwidthCharacterWidth<=2||e.spaceWidth<=2||e.maxDigitWidth<=2)&&(e=new FontInfo({pixelRatio:browser.PixelRatio.value,fontFamily:e.fontFamily,fontWeight:e.fontWeight,fontSize:e.fontSize,fontFeatureSettings:e.fontFeatureSettings,lineHeight:e.lineHeight,letterSpacing:e.letterSpacing,isMonospace:e.isMonospace,typicalHalfwidthCharacterWidth:Math.max(e.typicalHalfwidthCharacterWidth,5),typicalFullwidthCharacterWidth:Math.max(e.typicalFullwidthCharacterWidth,5),canUseHalfwidthRightwardsArrow:e.canUseHalfwidthRightwardsArrow,spaceWidth:Math.max(e.spaceWidth,5),middotWidth:Math.max(e.middotWidth,5),wsmiddotWidth:Math.max(e.wsmiddotWidth,5),maxDigitWidth:Math.max(e.maxDigitWidth,5)},!1)),this._writeToCache(t,e)}return this._cache.get(t)}_createRequest(t,e,i,s){const a=new CharWidthRequest(t,e);return i.push(a),s&&s.push(a),a}_actualReadFontInfo(t){const e=[],i=[],s=this._createRequest("n",0,e,i),a=this._createRequest("\uff4d",0,e,null),h=this._createRequest(" ",0,e,i),r=this._createRequest("0",0,e,i),n=this._createRequest("1",0,e,i),o=this._createRequest("2",0,e,i),d=this._createRequest("3",0,e,i),c=this._createRequest("4",0,e,i),u=this._createRequest("5",0,e,i),l=this._createRequest("6",0,e,i),m=this._createRequest("7",0,e,i),w=this._createRequest("8",0,e,i),_=this._createRequest("9",0,e,i),g=this._createRequest("\u2192",0,e,i),f=this._createRequest("\uffeb",0,e,null),p=this._createRequest("\xb7",0,e,i),R=this._createRequest(String.fromCharCode(11825),0,e,null),W="|/-_ilm%";for(let y=0,x=W.length;y<x;y++)this._createRequest(W.charAt(y),0,e,i),this._createRequest(W.charAt(y),1,e,i),this._createRequest(W.charAt(y),2,e,i);readCharWidths(t,e);const F=Math.max(r.width,n.width,o.width,d.width,c.width,u.width,l.width,m.width,w.width,_.width);let C=t.fontFeatureSettings===EditorFontLigatures.OFF;const q=i[0].width;for(let y=1,x=i.length;C&&y<x;y++){const t=q-i[y].width;if(t<-.001||t>.001){C=!1;break}}let v=!0;return C&&f.width!==q&&(v=!1),f.width>g.width&&(v=!1),new FontInfo({pixelRatio:browser.PixelRatio.value,fontFamily:t.fontFamily,fontWeight:t.fontWeight,fontSize:t.fontSize,fontFeatureSettings:t.fontFeatureSettings,lineHeight:t.lineHeight,letterSpacing:t.letterSpacing,isMonospace:C,typicalHalfwidthCharacterWidth:s.width,typicalFullwidthCharacterWidth:a.width,canUseHalfwidthRightwardsArrow:v,spaceWidth:h.width,middotWidth:p.width,wsmiddotWidth:R.width,maxDigitWidth:F},!0)}}class FontMeasurementsCache{constructor(){this._keys=Object.create(null),this._values=Object.create(null)}has(t){const e=t.getId();return!!this._values[e]}get(t){const e=t.getId();return this._values[e]}put(t,e){const i=t.getId();this._keys[i]=t,this._values[i]=e}remove(t){const e=t.getId();delete this._keys[e],delete this._values[e]}getValues(){return Object.keys(this._keys).map((t=>this._values[t]))}}export const FontMeasurements=new FontMeasurementsImpl;