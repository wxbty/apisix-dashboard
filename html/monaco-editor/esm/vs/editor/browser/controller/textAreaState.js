import*as strings from"../../../base/common/strings.js";import{Position}from"../../common/core/position.js";import{Range}from"../../common/core/range.js";export const _debugComposition=!1;export class TextAreaState{constructor(e,t,n,i,o){this.value=e,this.selectionStart=t,this.selectionEnd=n,this.selectionStartPosition=i,this.selectionEndPosition=o}toString(){return`[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`}static readFromTextArea(e){return new TextAreaState(e.getValue(),e.getSelectionStart(),e.getSelectionEnd(),null,null)}collapseSelection(){return new TextAreaState(this.value,this.value.length,this.value.length,null,null)}writeToTextArea(e,t,n){_debugComposition&&console.log(`writeToTextArea ${e}: ${this.toString()}`),t.setValue(e,this.value),n&&t.setSelectionRange(e,this.selectionStart,this.selectionEnd)}deduceEditorPosition(e){if(e<=this.selectionStart){const t=this.value.substring(e,this.selectionStart);return this._finishDeduceEditorPosition(this.selectionStartPosition,t,-1)}if(e>=this.selectionEnd){const t=this.value.substring(this.selectionEnd,e);return this._finishDeduceEditorPosition(this.selectionEndPosition,t,1)}const t=this.value.substring(this.selectionStart,e);if(-1===t.indexOf(String.fromCharCode(8230)))return this._finishDeduceEditorPosition(this.selectionStartPosition,t,1);const n=this.value.substring(e,this.selectionEnd);return this._finishDeduceEditorPosition(this.selectionEndPosition,n,-1)}_finishDeduceEditorPosition(e,t,n){let i=0,o=-1;while(-1!==(o=t.indexOf("\n",o+1)))i++;return[e,n*t.length,i]}static deduceInput(e,t,n){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};_debugComposition&&(console.log("------------------------deduceInput"),console.log(`PREVIOUS STATE: ${e.toString()}`),console.log(`CURRENT STATE: ${t.toString()}`));const i=Math.min(strings.commonPrefixLength(e.value,t.value),e.selectionStart,t.selectionStart),o=Math.min(strings.commonSuffixLength(e.value,t.value),e.value.length-e.selectionEnd,t.value.length-t.selectionEnd),s=e.value.substring(i,e.value.length-o),r=t.value.substring(i,t.value.length-o),l=e.selectionStart-i,a=e.selectionEnd-i,c=t.selectionStart-i,g=t.selectionEnd-i;if(_debugComposition&&(console.log(`AFTER DIFFING PREVIOUS STATE: <${s}>, selectionStart: ${l}, selectionEnd: ${a}`),console.log(`AFTER DIFFING CURRENT STATE: <${r}>, selectionStart: ${c}, selectionEnd: ${g}`)),c===g){const t=e.selectionStart-i;return _debugComposition&&console.log(`REMOVE PREVIOUS: ${t} chars`),{text:r,replacePrevCharCnt:t,replaceNextCharCnt:0,positionDelta:0}}const u=a-l;return{text:r,replacePrevCharCnt:u,replaceNextCharCnt:0,positionDelta:0}}static deduceAndroidCompositionInput(e,t){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};if(_debugComposition&&(console.log("------------------------deduceAndroidCompositionInput"),console.log(`PREVIOUS STATE: ${e.toString()}`),console.log(`CURRENT STATE: ${t.toString()}`)),e.value===t.value)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:t.selectionEnd-e.selectionEnd};const n=Math.min(strings.commonPrefixLength(e.value,t.value),e.selectionEnd),i=Math.min(strings.commonSuffixLength(e.value,t.value),e.value.length-e.selectionEnd),o=e.value.substring(n,e.value.length-i),s=t.value.substring(n,t.value.length-i),r=e.selectionStart-n,l=e.selectionEnd-n,a=t.selectionStart-n,c=t.selectionEnd-n;return _debugComposition&&(console.log(`AFTER DIFFING PREVIOUS STATE: <${o}>, selectionStart: ${r}, selectionEnd: ${l}`),console.log(`AFTER DIFFING CURRENT STATE: <${s}>, selectionStart: ${a}, selectionEnd: ${c}`)),{text:s,replacePrevCharCnt:l,replaceNextCharCnt:o.length-l,positionDelta:c-s.length}}}TextAreaState.EMPTY=new TextAreaState("",0,0,null,null);export class PagedScreenReaderStrategy{static _getPageOfLine(e,t){return Math.floor((e-1)/t)}static _getRangeForPage(e,t){const n=e*t,i=n+1,o=n+t;return new Range(i,1,o+1,1)}static fromEditorSelection(e,t,n,i,o){const s=PagedScreenReaderStrategy._getPageOfLine(n.startLineNumber,i),r=PagedScreenReaderStrategy._getRangeForPage(s,i),l=PagedScreenReaderStrategy._getPageOfLine(n.endLineNumber,i),a=PagedScreenReaderStrategy._getRangeForPage(l,i),c=r.intersectRanges(new Range(1,1,n.startLineNumber,n.startColumn));let g=t.getValueInRange(c,1);const u=t.getLineCount(),h=t.getLineMaxColumn(u),d=a.intersectRanges(new Range(n.endLineNumber,n.endColumn,u,h));let S,E=t.getValueInRange(d,1);if(s===l||s+1===l)S=t.getValueInRange(n,1);else{const e=r.intersectRanges(n),i=a.intersectRanges(n);S=t.getValueInRange(e,1)+String.fromCharCode(8230)+t.getValueInRange(i,1)}if(o){const e=500;g.length>e&&(g=g.substring(g.length-e,g.length)),E.length>e&&(E=E.substring(0,e)),S.length>2*e&&(S=S.substring(0,e)+String.fromCharCode(8230)+S.substring(S.length-e,S.length))}return new TextAreaState(g+S+E,g.length,g.length+S.length,new Position(n.startLineNumber,n.startColumn),new Position(n.endLineNumber,n.endColumn))}}