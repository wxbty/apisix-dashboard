import*as nls from"../../nls.js";import{URI}from"../../base/common/uri.js";import{ICodeEditorService}from"./services/codeEditorService.js";import{Position}from"../common/core/position.js";import{IModelService}from"../common/services/model.js";import{ITextModelService}from"../common/services/resolverService.js";import{MenuId,MenuRegistry}from"../../platform/actions/common/actions.js";import{CommandsRegistry}from"../../platform/commands/common/commands.js";import{ContextKeyExpr,IContextKeyService}from"../../platform/contextkey/common/contextkey.js";import{KeybindingsRegistry}from"../../platform/keybinding/common/keybindingsRegistry.js";import{Registry}from"../../platform/registry/common/platform.js";import{ITelemetryService}from"../../platform/telemetry/common/telemetry.js";import{withNullAsUndefined,assertType}from"../../base/common/types.js";import{ILogService}from"../../platform/log/common/log.js";export class Command{constructor(t){this.id=t.id,this.precondition=t.precondition,this._kbOpts=t.kbOpts,this._menuOpts=t.menuOpts,this._description=t.description}register(){if(Array.isArray(this._menuOpts)?this._menuOpts.forEach(this._registerMenuItem,this):this._menuOpts&&this._registerMenuItem(this._menuOpts),this._kbOpts){const t=Array.isArray(this._kbOpts)?this._kbOpts:[this._kbOpts];for(const e of t){let t=e.kbExpr;this.precondition&&(t=t?ContextKeyExpr.and(t,this.precondition):this.precondition);const i={id:this.id,weight:e.weight,args:e.args,when:t,primary:e.primary,secondary:e.secondary,win:e.win,linux:e.linux,mac:e.mac};KeybindingsRegistry.registerKeybindingRule(i)}}CommandsRegistry.registerCommand({id:this.id,handler:(t,e)=>this.runCommand(t,e),description:this._description})}_registerMenuItem(t){MenuRegistry.appendMenuItem(t.menuId,{group:t.group,command:{id:this.id,title:t.title,icon:t.icon,precondition:this.precondition},when:t.when,order:t.order})}}export class MultiCommand extends Command{constructor(){super(...arguments),this._implementations=[]}addImplementation(t,e,i){return this._implementations.push({priority:t,name:e,implementation:i}),this._implementations.sort(((t,e)=>e.priority-t.priority)),{dispose:()=>{for(let t=0;t<this._implementations.length;t++)if(this._implementations[t].implementation===i)return void this._implementations.splice(t,1)}}}runCommand(t,e){const i=t.get(ILogService);i.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);for(const o of this._implementations){const n=o.implementation(t,e);if(n){if(i.trace(`Command '${this.id}' was handled by '${o.name}'.`),"boolean"===typeof n)return;return n}}i.trace(`The Command '${this.id}' was not handled by any implementation.`)}}export class ProxyCommand extends Command{constructor(t,e){super(e),this.command=t}runCommand(t,e){return this.command.runCommand(t,e)}}export class EditorCommand extends Command{static bindToContribution(t){return class extends EditorCommand{constructor(t){super(t),this._callback=t.handler}runEditorCommand(e,i,o){const n=t(i);n&&this._callback(n,o)}}}runCommand(t,e){const i=t.get(ICodeEditorService),o=i.getFocusedCodeEditor()||i.getActiveCodeEditor();if(o)return o.invokeWithinContext((t=>{const i=t.get(IContextKeyService);if(i.contextMatchesRules(withNullAsUndefined(this.precondition)))return this.runEditorCommand(t,o,e)}))}}export class EditorAction extends EditorCommand{constructor(t){super(EditorAction.convertOptions(t)),this.label=t.label,this.alias=t.alias}static convertOptions(t){let e;function i(e){return e.menuId||(e.menuId=MenuId.EditorContext),e.title||(e.title=t.label),e.when=ContextKeyExpr.and(t.precondition,e.when),e}return e=Array.isArray(t.menuOpts)?t.menuOpts:t.menuOpts?[t.menuOpts]:[],Array.isArray(t.contextMenuOpts)?e.push(...t.contextMenuOpts.map(i)):t.contextMenuOpts&&e.push(i(t.contextMenuOpts)),t.menuOpts=e,t}runEditorCommand(t,e,i){return this.reportTelemetry(t,e),this.run(t,e,i||{})}reportTelemetry(t,e){t.get(ITelemetryService).publicLog2("editorActionInvoked",{name:this.label,id:this.id})}}export class MultiEditorAction extends EditorAction{constructor(){super(...arguments),this._implementations=[]}addImplementation(t,e){return this._implementations.push([t,e]),this._implementations.sort(((t,e)=>e[0]-t[0])),{dispose:()=>{for(let t=0;t<this._implementations.length;t++)if(this._implementations[t][1]===e)return void this._implementations.splice(t,1)}}}run(t,e,i){for(const o of this._implementations){const n=o[1](t,e,i);if(n){if("boolean"===typeof n)return;return n}}}}export function registerModelAndPositionCommand(t,e){CommandsRegistry.registerCommand(t,(function(t,...i){const[o,n]=i;assertType(URI.isUri(o)),assertType(Position.isIPosition(n));const r=t.get(IModelService).getModel(o);if(r){const t=Position.lift(n);return e(r,t,...i.slice(2))}return t.get(ITextModelService).createModelReference(o).then((t=>new Promise(((o,r)=>{try{const r=e(t.object.textEditorModel,Position.lift(n),i.slice(2));o(r)}catch(s){r(s)}})).finally((()=>{t.dispose()}))))}))}export function registerModelCommand(t,e){CommandsRegistry.registerCommand(t,(function(t,...i){const[o]=i;assertType(URI.isUri(o));const n=t.get(IModelService).getModel(o);return n?e(n,...i.slice(1)):t.get(ITextModelService).createModelReference(o).then((t=>new Promise(((o,n)=>{try{const n=e(t.object.textEditorModel,i.slice(1));o(n)}catch(r){n(r)}})).finally((()=>{t.dispose()}))))}))}export function registerEditorCommand(t){return EditorContributionRegistry.INSTANCE.registerEditorCommand(t),t}export function registerEditorAction(t){const e=new t;return EditorContributionRegistry.INSTANCE.registerEditorAction(e),e}export function registerMultiEditorAction(t){return EditorContributionRegistry.INSTANCE.registerEditorAction(t),t}export function registerInstantiatedEditorAction(t){EditorContributionRegistry.INSTANCE.registerEditorAction(t)}export function registerEditorContribution(t,e){EditorContributionRegistry.INSTANCE.registerEditorContribution(t,e)}export var EditorExtensionsRegistry;(function(t){function e(t){return EditorContributionRegistry.INSTANCE.getEditorCommand(t)}function i(){return EditorContributionRegistry.INSTANCE.getEditorActions()}function o(){return EditorContributionRegistry.INSTANCE.getEditorContributions()}function n(t){return EditorContributionRegistry.INSTANCE.getEditorContributions().filter((e=>t.indexOf(e.id)>=0))}function r(){return EditorContributionRegistry.INSTANCE.getDiffEditorContributions()}t.getEditorCommand=e,t.getEditorActions=i,t.getEditorContributions=o,t.getSomeEditorContributions=n,t.getDiffEditorContributions=r})(EditorExtensionsRegistry||(EditorExtensionsRegistry={}));const Extensions={EditorCommonContributions:"editor.contributions"};class EditorContributionRegistry{constructor(){this.editorContributions=[],this.diffEditorContributions=[],this.editorActions=[],this.editorCommands=Object.create(null)}registerEditorContribution(t,e){this.editorContributions.push({id:t,ctor:e})}getEditorContributions(){return this.editorContributions.slice(0)}getDiffEditorContributions(){return this.diffEditorContributions.slice(0)}registerEditorAction(t){t.register(),this.editorActions.push(t)}getEditorActions(){return this.editorActions.slice(0)}registerEditorCommand(t){t.register(),this.editorCommands[t.id]=t}getEditorCommand(t){return this.editorCommands[t]||null}}function registerCommand(t){return t.register(),t}EditorContributionRegistry.INSTANCE=new EditorContributionRegistry,Registry.add(Extensions.EditorCommonContributions,EditorContributionRegistry.INSTANCE);export const UndoCommand=registerCommand(new MultiCommand({id:"undo",precondition:void 0,kbOpts:{weight:0,primary:2104},menuOpts:[{menuId:MenuId.MenubarEditMenu,group:"1_do",title:nls.localize({key:"miUndo",comment:["&& denotes a mnemonic"]},"&&Undo"),order:1},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("undo","Undo"),order:1}]}));registerCommand(new ProxyCommand(UndoCommand,{id:"default:undo",precondition:void 0}));export const RedoCommand=registerCommand(new MultiCommand({id:"redo",precondition:void 0,kbOpts:{weight:0,primary:2103,secondary:[3128],mac:{primary:3128}},menuOpts:[{menuId:MenuId.MenubarEditMenu,group:"1_do",title:nls.localize({key:"miRedo",comment:["&& denotes a mnemonic"]},"&&Redo"),order:2},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("redo","Redo"),order:1}]}));registerCommand(new ProxyCommand(RedoCommand,{id:"default:redo",precondition:void 0}));export const SelectAllCommand=registerCommand(new MultiCommand({id:"editor.action.selectAll",precondition:void 0,kbOpts:{weight:0,kbExpr:null,primary:2079},menuOpts:[{menuId:MenuId.MenubarSelectionMenu,group:"1_basic",title:nls.localize({key:"miSelectAll",comment:["&& denotes a mnemonic"]},"&&Select All"),order:1},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("selectAll","Select All"),order:1}]}));