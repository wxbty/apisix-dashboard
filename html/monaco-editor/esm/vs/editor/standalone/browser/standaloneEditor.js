import"./standalone-tokens.css";import{splitLines}from"../../../base/common/strings.js";import{FontMeasurements}from"../../browser/config/fontMeasurements.js";import{ICodeEditorService}from"../../browser/services/codeEditorService.js";import{DiffNavigator}from"../../browser/widget/diffNavigator.js";import{ApplyUpdateResult,ConfigurationChangedEvent,EditorOptions}from"../../common/config/editorOptions.js";import{BareFontInfo,FontInfo}from"../../common/config/fontInfo.js";import{EditorType}from"../../common/editorCommon.js";import{FindMatch,TextModelResolvedOptions}from"../../common/model.js";import*as languages from"../../common/languages.js";import{ILanguageConfigurationService}from"../../common/languages/languageConfigurationRegistry.js";import{NullState,nullTokenize}from"../../common/languages/nullMode.js";import{ILanguageService}from"../../common/services/language.js";import{IModelService}from"../../common/services/model.js";import{createWebWorker as actualCreateWebWorker}from"../../browser/services/webWorker.js";import*as standaloneEnums from"../../common/standalone/standaloneEnums.js";import{Colorizer}from"./colorizer.js";import{createTextModel,StandaloneDiffEditor,StandaloneEditor}from"./standaloneCodeEditor.js";import{StandaloneServices}from"./standaloneServices.js";import{IStandaloneThemeService}from"../common/standaloneTheme.js";import{CommandsRegistry}from"../../../platform/commands/common/commands.js";import{IMarkerService}from"../../../platform/markers/common/markers.js";export function create(e,o,n){const t=StandaloneServices.initialize(n||{});return t.createInstance(StandaloneEditor,e,o)}export function onDidCreateEditor(e){const o=StandaloneServices.get(ICodeEditorService);return o.onCodeEditorAdd((o=>{e(o)}))}export function createDiffEditor(e,o,n){const t=StandaloneServices.initialize(n||{});return t.createInstance(StandaloneDiffEditor,e,o)}export function createDiffNavigator(e,o){return new DiffNavigator(e,o)}export function createModel(e,o,n){const t=StandaloneServices.get(ILanguageService),r=t.getLanguageIdByMimeType(o)||o;return createTextModel(StandaloneServices.get(IModelService),t,e,r,n)}export function setModelLanguage(e,o){const n=StandaloneServices.get(ILanguageService),t=StandaloneServices.get(IModelService);t.setMode(e,n.createById(o))}export function setModelMarkers(e,o,n){if(e){const t=StandaloneServices.get(IMarkerService);t.changeOne(o,e.uri,n)}}export function getModelMarkers(e){const o=StandaloneServices.get(IMarkerService);return o.read(e)}export function onDidChangeMarkers(e){const o=StandaloneServices.get(IMarkerService);return o.onMarkerChanged(e)}export function getModel(e){const o=StandaloneServices.get(IModelService);return o.getModel(e)}export function getModels(){const e=StandaloneServices.get(IModelService);return e.getModels()}export function onDidCreateModel(e){const o=StandaloneServices.get(IModelService);return o.onModelAdded(e)}export function onWillDisposeModel(e){const o=StandaloneServices.get(IModelService);return o.onModelRemoved(e)}export function onDidChangeModelLanguage(e){const o=StandaloneServices.get(IModelService);return o.onModelLanguageChanged((o=>{e({model:o.model,oldLanguage:o.oldLanguageId})}))}export function createWebWorker(e){return actualCreateWebWorker(StandaloneServices.get(IModelService),StandaloneServices.get(ILanguageConfigurationService),e)}export function colorizeElement(e,o){const n=StandaloneServices.get(ILanguageService),t=StandaloneServices.get(IStandaloneThemeService);return t.registerEditorContainer(e),Colorizer.colorizeElement(t,n,e,o)}export function colorize(e,o,n){const t=StandaloneServices.get(ILanguageService),r=StandaloneServices.get(IStandaloneThemeService);return r.registerEditorContainer(document.body),Colorizer.colorize(t,e,o,n)}export function colorizeModelLine(e,o,n=4){const t=StandaloneServices.get(IStandaloneThemeService);return t.registerEditorContainer(document.body),Colorizer.colorizeModelLine(e,o,n)}function getSafeTokenizationSupport(e){const o=languages.TokenizationRegistry.get(e);return o||{getInitialState:()=>NullState,tokenize:(o,n,t)=>nullTokenize(e,t)}}export function tokenize(e,o){languages.TokenizationRegistry.getOrCreate(o);const n=getSafeTokenizationSupport(o),t=splitLines(e),r=[];let i=n.getInitialState();for(let a=0,s=t.length;a<s;a++){const e=t[a],o=n.tokenize(e,!0,i);r[a]=o.tokens,i=o.endState}return r}export function defineTheme(e,o){const n=StandaloneServices.get(IStandaloneThemeService);n.defineTheme(e,o)}export function setTheme(e){const o=StandaloneServices.get(IStandaloneThemeService);o.setTheme(e)}export function remeasureFonts(){FontMeasurements.clearAllFontInfos()}export function registerCommand(e,o){return CommandsRegistry.registerCommand({id:e,handler:o})}export function createMonacoEditorAPI(){return{create:create,onDidCreateEditor:onDidCreateEditor,createDiffEditor:createDiffEditor,createDiffNavigator:createDiffNavigator,createModel:createModel,setModelLanguage:setModelLanguage,setModelMarkers:setModelMarkers,getModelMarkers:getModelMarkers,onDidChangeMarkers:onDidChangeMarkers,getModels:getModels,getModel:getModel,onDidCreateModel:onDidCreateModel,onWillDisposeModel:onWillDisposeModel,onDidChangeModelLanguage:onDidChangeModelLanguage,createWebWorker:createWebWorker,colorizeElement:colorizeElement,colorize:colorize,colorizeModelLine:colorizeModelLine,tokenize:tokenize,defineTheme:defineTheme,setTheme:setTheme,remeasureFonts:remeasureFonts,registerCommand:registerCommand,AccessibilitySupport:standaloneEnums.AccessibilitySupport,ContentWidgetPositionPreference:standaloneEnums.ContentWidgetPositionPreference,CursorChangeReason:standaloneEnums.CursorChangeReason,DefaultEndOfLine:standaloneEnums.DefaultEndOfLine,EditorAutoIndentStrategy:standaloneEnums.EditorAutoIndentStrategy,EditorOption:standaloneEnums.EditorOption,EndOfLinePreference:standaloneEnums.EndOfLinePreference,EndOfLineSequence:standaloneEnums.EndOfLineSequence,MinimapPosition:standaloneEnums.MinimapPosition,MouseTargetType:standaloneEnums.MouseTargetType,OverlayWidgetPositionPreference:standaloneEnums.OverlayWidgetPositionPreference,OverviewRulerLane:standaloneEnums.OverviewRulerLane,RenderLineNumbersType:standaloneEnums.RenderLineNumbersType,RenderMinimap:standaloneEnums.RenderMinimap,ScrollbarVisibility:standaloneEnums.ScrollbarVisibility,ScrollType:standaloneEnums.ScrollType,TextEditorCursorBlinkingStyle:standaloneEnums.TextEditorCursorBlinkingStyle,TextEditorCursorStyle:standaloneEnums.TextEditorCursorStyle,TrackedRangeStickiness:standaloneEnums.TrackedRangeStickiness,WrappingIndent:standaloneEnums.WrappingIndent,InjectedTextCursorStops:standaloneEnums.InjectedTextCursorStops,PositionAffinity:standaloneEnums.PositionAffinity,ConfigurationChangedEvent:ConfigurationChangedEvent,BareFontInfo:BareFontInfo,FontInfo:FontInfo,TextModelResolvedOptions:TextModelResolvedOptions,FindMatch:FindMatch,ApplyUpdateResult:ApplyUpdateResult,EditorType:EditorType,EditorOptions:EditorOptions}}