export function isFuzzyActionArr(t){return Array.isArray(t)}export function isFuzzyAction(t){return!isFuzzyActionArr(t)}export function isString(t){return"string"===typeof t}export function isIAction(t){return!isString(t)}export function empty(t){return!t}export function fixCase(t,n){return t.ignoreCase&&n?n.toLowerCase():n}export function sanitize(t){return t.replace(/[&<>'"_]/g,"-")}export function log(t,n){console.log(`${t.languageId}: ${n}`)}export function createError(t,n){return new Error(`${t.languageId}: ${n}`)}export function substituteMatches(t,n,e,r,o){const i=/\$((\$)|(#)|(\d\d?)|[sS](\d\d?)|@(\w+))/g;let u=null;return n.replace(i,(function(n,i,s,l,c,f,p,a,x){return empty(s)?empty(l)?!empty(c)&&c<r.length?fixCase(t,r[c]):!empty(p)&&t&&"string"===typeof t[p]?t[p]:(null===u&&(u=o.split("."),u.unshift(o)),!empty(f)&&f<u.length?fixCase(t,u[f]):""):fixCase(t,e):"$"}))}export function findRules(t,n){let e=n;while(e&&e.length>0){const n=t.tokenizer[e];if(n)return n;const r=e.lastIndexOf(".");e=r<0?null:e.substr(0,r)}return null}export function stateExists(t,n){let e=n;while(e&&e.length>0){const n=t.stateNames[e];if(n)return!0;const r=e.lastIndexOf(".");e=r<0?null:e.substr(0,r)}return!1}